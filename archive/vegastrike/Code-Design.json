[
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/royfalk",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/10576016?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/10576016?v=4&s=60",
   "displayName": "Roy Falk",
   "gv": "4",
   "id": "5e90c356d73408ce4fe000f6",
   "url": "/royfalk",
   "username": "royfalk",
   "v": 21
  },
  "html": "Welcome to code design. I&#39;m keeping this private and limited, though you may either add people or ask me if you don&#39;t have permissions.<br>The purpose of this room is to discuss various aspects of C++ and its use in the game development.<br>I suspect I&#39;m currently doing most of the code refactoring in terms of lines of code but I am not an experienced C++ developer.<br>I am making design decisions about the code that at the very least should be discussed beforehand.",
  "id": "60c26842747a772d99e8552e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2021-06-10T19:30:10.755Z",
  "text": "Welcome to code design. I'm keeping this private and limited, though you may either add people or ask me if you don't have permissions.\nThe purpose of this room is to discuss various aspects of C++ and its use in the game development. \nI suspect I'm currently doing most of the code refactoring in terms of lines of code but I am not an experienced C++ developer.\nI am making design decisions about the code that at the very least should be discussed beforehand.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/royfalk",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/10576016?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/10576016?v=4&s=60",
   "displayName": "Roy Falk",
   "gv": "4",
   "id": "5e90c356d73408ce4fe000f6",
   "url": "/royfalk",
   "username": "royfalk",
   "v": 21
  },
  "html": "First issue - unit class hierarchy. I&#39;ve successfully dealt with the abomination we had before but we still have a mountain of code in unit_generic and its satellites. Note that I&#39;m not talking about sub-classes but additional files that have parts of the Unit class. (reminder - unit_generic.h = Unit class / unit.h = GameUnit)<br>I&#39;ve made a dent over the last few months and especially days by moving code to separate classes (Movable, Damageable, etc.) but now Unit inherits from 9 classes and the end is not in sight. I&#39;m thinking of shifting to another way of doing things and would like your advice. One option is to make superclasses into fields. Unit would simply have a field of Movable movable and all calls would now be unit-&gt;movable-&gt;...<br>This would be less elegant. Feel free to suggest other options or I can ask in S/O software design.  ",
  "id": "60c26a47b317311354221358",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2021-06-10T19:38:47.391Z",
  "text": "First issue - unit class hierarchy. I've successfully dealt with the abomination we had before but we still have a mountain of code in unit_generic and its satellites. Note that I'm not talking about sub-classes but additional files that have parts of the Unit class. (reminder - unit_generic.h = Unit class / unit.h = GameUnit)\nI've made a dent over the last few months and especially days by moving code to separate classes (Movable, Damageable, etc.) but now Unit inherits from 9 classes and the end is not in sight. I'm thinking of shifting to another way of doing things and would like your advice. One option is to make superclasses into fields. Unit would simply have a field of Movable movable and all calls would now be unit->movable->...\nThis would be less elegant. Feel free to suggest other options or I can ask in S/O software design.  ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/royfalk",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/10576016?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/10576016?v=4&s=60",
   "displayName": "Roy Falk",
   "gv": "4",
   "id": "5e90c356d73408ce4fe000f6",
   "url": "/royfalk",
   "username": "royfalk",
   "v": 21
  },
  "html": "Second issue is coding standard. I talked about it but the day to day talk moves too fast. I&#39;d like to adopt the Google C++ style guide (<a href=\"https://google.github.io/styleguide/cppguide.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link \">https://google.github.io/styleguide/cppguide.html</a>) including names of variables, classes, etc. Right now files have fields starting with lower and upper cases, etc. Beyond the usual advantages, when I now refactor, I touch a ton of code, and it feels wrong that when I do, I&#39;m not aligned to some style. I try to be consistent but whatever I do is probably not going to be what we finally pick so let&#39;s pick now so I&#39;ll know what I&#39;m doing is good.",
  "id": "60c26b2ad161a54f050b0d5b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2021-06-10T19:42:34.831Z",
  "text": "Second issue is coding standard. I talked about it but the day to day talk moves too fast. I'd like to adopt the Google C++ style guide (https://google.github.io/styleguide/cppguide.html) including names of variables, classes, etc. Right now files have fields starting with lower and upper cases, etc. Beyond the usual advantages, when I now refactor, I touch a ton of code, and it feels wrong that when I do, I'm not aligned to some style. I try to be consistent but whatever I do is probably not going to be what we finally pick so let's pick now so I'll know what I'm doing is good.",
  "unread": false,
  "urls": [
   {
    "url": "https://google.github.io/styleguide/cppguide.html"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/BenjamenMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=60",
   "displayName": "Benjamen Meyer",
   "gv": "4",
   "id": "5e86b71dd73408ce4fdf0da2",
   "url": "/BenjamenMeyer",
   "username": "BenjamenMeyer",
   "v": 7
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"royfalk\" class=\"mention\">@royfalk</span> thanks - I added a few more people; <span data-link-type=\"mention\" data-screen-name=\"Loki1950\" class=\"mention\">@Loki1950</span> and <span data-link-type=\"mention\" data-screen-name=\"nabaco\" class=\"mention\">@nabaco</span> as they share leadership; <span data-link-type=\"mention\" data-screen-name=\"P-D-E\" class=\"mention\">@P-D-E</span> and <span data-link-type=\"mention\" data-screen-name=\"ministerofinformation\" class=\"mention\">@ministerofinformation</span> as they have more historical knowledge that may be of help in some of these discussions",
  "id": "60c2a9f8c705e53c1c85bced",
  "issues": [],
  "mentions": [
   {
    "screenName": "royfalk",
    "userId": "5e90c356d73408ce4fe000f6",
    "userIds": []
   },
   {
    "screenName": "Loki1950",
    "userId": "5e90e822d73408ce4fe00596",
    "userIds": []
   },
   {
    "screenName": "nabaco",
    "userId": "5cf91f0bd73408ce4fc25bc2",
    "userIds": []
   },
   {
    "screenName": "P-D-E",
    "userId": "609a98306da03739847c5fac",
    "userIds": []
   },
   {
    "screenName": "ministerofinformation",
    "userId": "5f19fc4ad73408ce4fea6452",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-11T00:10:32.815Z",
  "text": "@royfalk thanks - I added a few more people; @Loki1950 and @nabaco as they share leadership; @P-D-E and @ministerofinformation as they have more historical knowledge that may be of help in some of these discussions",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/BenjamenMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=60",
   "displayName": "Benjamen Meyer",
   "gv": "4",
   "id": "5e86b71dd73408ce4fdf0da2",
   "url": "/BenjamenMeyer",
   "username": "BenjamenMeyer",
   "v": 7
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"royfalk\" class=\"mention\">@royfalk</span> per Coding Standard - we&#39;re suppose to be following <a href=\"https://wiki.vega-strike.org/Development:Code_style\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link \">https://wiki.vega-strike.org/Development:Code_style</a> at the moment. By itself it&#39;s incomplete; however, it references the Linux Kernel Coding Standard using an old article; it may be better to adjust that to <a href=\"https://www.kernel.org/doc/html/v4.10/process/coding-style.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link \">https://www.kernel.org/doc/html/v4.10/process/coding-style.html</a> supposing we want to keep with the LK style. In any case, it would be good for us to find a linter that can enforce whichever style we use and add that as a PR gate check going forward.",
  "id": "60c2aaced20143617e3aeb20",
  "issues": [],
  "mentions": [
   {
    "screenName": "royfalk",
    "userId": "5e90c356d73408ce4fe000f6",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-11T00:14:06.211Z",
  "text": "@royfalk per Coding Standard - we're suppose to be following https://wiki.vega-strike.org/Development:Code_style at the moment. By itself it's incomplete; however, it references the Linux Kernel Coding Standard using an old article; it may be better to adjust that to https://www.kernel.org/doc/html/v4.10/process/coding-style.html supposing we want to keep with the LK style. In any case, it would be good for us to find a linter that can enforce whichever style we use and add that as a PR gate check going forward.",
  "unread": false,
  "urls": [
   {
    "url": "https://wiki.vega-strike.org/Development:Code_style"
   },
   {
    "url": "https://www.kernel.org/doc/html/v4.10/process/coding-style.html"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/BenjamenMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=60",
   "displayName": "Benjamen Meyer",
   "gv": "4",
   "id": "5e86b71dd73408ce4fdf0da2",
   "url": "/BenjamenMeyer",
   "username": "BenjamenMeyer",
   "v": 7
  },
  "html": "Per Class Hierarchy - this is one area that I&#39;d like to discuss a change related to the coding standard I just mentioned as I&#39;d like us to take more advantage of classes and inheritance. I&#39;m find with limiting a class to only inheriting from one parent; but I think we could use more depth and possibly make better use of class polymorphism. This could potentially simplify a lot of things, and may make unit testing easier too.",
  "id": "60c2ab31d855766185ceab08",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-11T00:15:45.397Z",
  "text": "Per Class Hierarchy - this is one area that I'd like to discuss a change related to the coding standard I just mentioned as I'd like us to take more advantage of classes and inheritance. I'm find with limiting a class to only inheriting from one parent; but I think we could use more depth and possibly make better use of class polymorphism. This could potentially simplify a lot of things, and may make unit testing easier too.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2021-06-11T01:43:41.392Z",
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 25
  },
  "html": "<blockquote>\n<p>I&#39;ve made a dent over the last few months and especially days by moving code to separate classes (Movable, Damageable, etc.) but now Unit inherits from 9 classes and the end is not in sight. I&#39;m thinking of shifting to another way of doing things and would like your advice. </p></blockquote>\n<p>So, if you&#39;re trying to do interfaces or duck-typing in C++, you&#39;ll probably end up with multiple inheritance ... which, as you note, is never clean-feeling</p>",
  "id": "60c2bf81c705e53c1c85eabd",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-11T01:42:25.740Z",
  "text": "> I've made a dent over the last few months and especially days by moving code to separate classes (Movable, Damageable, etc.) but now Unit inherits from 9 classes and the end is not in sight. I'm thinking of shifting to another way of doing things and would like your advice. \n\nSo, if you're trying to do interfaces or duck-typing in C++, you'll probably end up with multiple inheritance ... which, as you note, is never clean-feeling",
  "unread": false,
  "urls": [],
  "v": 3
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 25
  },
  "html": "One option is to flip the hierarchy around",
  "id": "60c2bfe5747a772d99e91301",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-11T01:44:05.902Z",
  "text": "One option is to flip the hierarchy around",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 25
  },
  "html": "With, in this case a single root at Unit, with the different types extending it",
  "id": "60c2c031d855766185ced87d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-11T01:45:21.645Z",
  "text": "With, in this case a single root at Unit, with the different types extending it",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 25
  },
  "html": "Even this won&#39;t always be clean if you can&#39;t isolate the extensions into a tree and end up with a DAG",
  "id": "60c2c044184fef617adf46ef",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-11T01:45:40.205Z",
  "text": "Even this won't always be clean if you can't isolate the extensions into a tree and end up with a DAG",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 25
  },
  "html": "Now, if you keep ending up with a DAG, one possibility is that the &quot;natural&quot; polymorphism isn&#39;t projected well - maybe the root needs to be something else",
  "id": "60c2c08fbed13a2dba790ba5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-11T01:46:55.965Z",
  "text": "Now, if you keep ending up with a DAG, one possibility is that the \"natural\" polymorphism isn't projected well - maybe the root needs to be something else",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 25
  },
  "html": "maybe you need a forest, because you&#39;re actually dealing with a family of object types, etc.",
  "id": "60c2c0a2d161a54f050bca66",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-11T01:47:14.310Z",
  "text": "maybe you need a forest, because you're actually dealing with a family of object types, etc.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 25
  },
  "html": "... this is where whiteboards (and a good eraser) are handy",
  "id": "60c2c0b64fc7ad136ac4202f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-11T01:47:34.037Z",
  "text": "... this is where whiteboards (and a good eraser) are handy",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 25
  },
  "html": "I think this is something where a fair bit of sketching about what we&#39;d like to have, rather than worrying about what we do have, class relationship-wise, is going to be the best way to make subsequent efforts in refactoring efficient",
  "id": "60c2c117184fef617adf48ac",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-11T01:49:11.744Z",
  "text": "I think this is something where a fair bit of sketching about what we'd like to have, rather than worrying about what we do have, class relationship-wise, is going to be the best way to make subsequent efforts in refactoring efficient",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 25
  },
  "html": "Just as an off the cuff brainstorm, one possible set of roots to consider would be to have {GameLogicEntity, PhysicsEngineEntity, GraphicsEngineEntity}, each with subclasses, and then a given Unit just points to a GameLogicEntity, PhysicsEngineEntity and a GraphicsEngineEntity -- this is similar to your superclass-as-field direction, but would entail a rethinking of what functions would need to operate across all Units (things modeled at some level), vs. across all GameLogicEntities (things with stats), PhysicsEngineEntities (things that can interact with physics), etc. vs only subclasses of the above (e.g iterating across all PhysicsEngineEntities::CollideableWithOthers::CollideableWithSelf). ",
  "id": "60c2c39c5e8dfc4f11752a51",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-11T01:59:56.621Z",
  "text": "Just as an off the cuff brainstorm, one possible set of roots to consider would be to have {GameLogicEntity, PhysicsEngineEntity, GraphicsEngineEntity}, each with subclasses, and then a given Unit just points to a GameLogicEntity, PhysicsEngineEntity and a GraphicsEngineEntity -- this is similar to your superclass-as-field direction, but would entail a rethinking of what functions would need to operate across all Units (things modeled at some level), vs. across all GameLogicEntities (things with stats), PhysicsEngineEntities (things that can interact with physics), etc. vs only subclasses of the above (e.g iterating across all PhysicsEngineEntities::CollideableWithOthers::CollideableWithSelf). ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 25
  },
  "html": "Whatever we decide as the new structure, I don&#39;t think this will be easy or efficient to do piecemeal, but would be best coupled with a global brainstorm over how and where the code should be modularized",
  "id": "60c2c3e0184fef617adf4e5d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-11T02:01:04.385Z",
  "text": "Whatever we decide as the new structure, I don't think this will be easy or efficient to do piecemeal, but would be best coupled with a global brainstorm over how and where the code should be modularized",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/Loki1950",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/21045314?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/21045314?v=4&s=60",
   "displayName": "Loki1950",
   "gv": "4",
   "id": "5e90e822d73408ce4fe00596",
   "url": "/Loki1950",
   "username": "Loki1950",
   "v": 903
  },
  "html": "Would an enumeration of all the classes be useful or just more underbrush.",
  "id": "60c2c447b31731135422dcfe",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-11T02:02:47.435Z",
  "text": "Would an enumeration of all the classes be useful or just more underbrush.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 25
  },
  "html": "<blockquote>\nWould an enumeration of all the classes be useful or just more underbrush.<br>An enumeration+visualization of all the classes that are currently co-mingled with &quot;Unit&quot; could be useful, as long as we realize that this neither is nor should be the set of classes we should be actually aiming for</blockquote>\n",
  "id": "60c2c4c456df183c230a7091",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-11T02:04:52.762Z",
  "text": "> Would an enumeration of all the classes be useful or just more underbrush.\nAn enumeration+visualization of all the classes that are currently co-mingled with \"Unit\" could be useful, as long as we realize that this neither is nor should be the set of classes we should be actually aiming for",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 25
  },
  "html": "Moreover, it&#39;s only useful if we can abstract the level of detail in the visualization down to something human-manageable",
  "id": "60c2c4f7d20143617e3b2553",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-11T02:05:43.342Z",
  "text": "Moreover, it's only useful if we can abstract the level of detail in the visualization down to something human-manageable",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 25
  },
  "html": "I saw a dotty plot of the class structures in VS once, many years ago... I was not particularly enlightened by that flat, global view",
  "id": "60c2c51da5d5740d611afe2a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-11T02:06:21.479Z",
  "text": "I saw a dotty plot of the class structures in VS once, many years ago... I was not particularly enlightened by that flat, global view",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 25
  },
  "html": "The other danger is that, if we&#39;re convinced that what we want is radically different than what we have, ",
  "id": "60c2c5568681550d4ee33bc7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-11T02:07:18.585Z",
  "text": "The other danger is that, if we're convinced that what we want is radically different than what we have, ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 25
  },
  "html": "then the map of the current structure only really becomes relevant in understanding how to do the refactor, not so much in deciding what the re-organization should be",
  "id": "60c2c57587848634af138fae",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-11T02:07:49.757Z",
  "text": "then the map of the current structure only really becomes relevant in understanding how to do the refactor, not so much in deciding what the re-organization should be",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/Loki1950",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/21045314?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/21045314?v=4&s=60",
   "displayName": "Loki1950",
   "gv": "4",
   "id": "5e90e822d73408ce4fe00596",
   "url": "/Loki1950",
   "username": "Loki1950",
   "v": 903
  },
  "html": "That maybe doable but as your mentioned human-manageable is iffy and what we need and what have may not be congruent.",
  "id": "60c2c5ce5e8dfc4f11752ec6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-11T02:09:18.702Z",
  "text": "That maybe doable but as your mentioned human-manageable is iffy and what we need and what have may not be congruent.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 25
  },
  "html": "This is certainly something that we can (and probably should) work at from both ends, at least a little",
  "id": "60c2c5f4d20143617e3b2733",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-11T02:09:56.040Z",
  "text": "This is certainly something that we can (and probably should) work at from both ends, at least a little",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/Loki1950",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/21045314?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/21045314?v=4&s=60",
   "displayName": "Loki1950",
   "gv": "4",
   "id": "5e90e822d73408ce4fe00596",
   "url": "/Loki1950",
   "username": "Loki1950",
   "v": 903
  },
  "html": "Might find some missed inheritance issues as well. ",
  "id": "60c2c6405e8dfc4f11752f97",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-11T02:11:12.387Z",
  "text": "Might find some missed inheritance issues as well. ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 25
  },
  "html": "On the one side, we should catalogue, if not exactly what the inter-class structure is, then at least the broad set of behaviors that we&#39;re requiring of the current classes in order to make sure that whatever brainstormed new organization actually has good coverage over previous functionality within its natural abstractions",
  "id": "60c2c661d161a54f050bd6e9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-11T02:11:45.384Z",
  "text": "On the one side, we should catalogue, if not exactly what the inter-class structure is, then at least the broad set of behaviors that we're requiring of the current classes in order to make sure that whatever brainstormed new organization actually has good coverage over previous functionality within its natural abstractions",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 25
  },
  "html": "On the other side, if we&#39;re starting from first principles, than coverage of previous functionality is needed, but there&#39;s no reason to restrict ourselves to any previous design decision just because it was a good fit for the old hierarchy",
  "id": "60c2c6c587848634af139210",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-11T02:13:25.234Z",
  "text": "On the other side, if we're starting from first principles, than coverage of previous functionality is needed, but there's no reason to restrict ourselves to any previous design decision just because it was a good fit for the old hierarchy",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 25
  },
  "html": "Whiteboards/pencil&amp;paper -- this is a good task for a visual medium",
  "id": "60c2c6ee184fef617adf55ba",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-11T02:14:06.463Z",
  "text": "Whiteboards/pencil&paper -- this is a good task for a visual medium",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/Loki1950",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/21045314?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/21045314?v=4&s=60",
   "displayName": "Loki1950",
   "gv": "4",
   "id": "5e90e822d73408ce4fe00596",
   "url": "/Loki1950",
   "username": "Loki1950",
   "v": 903
  },
  "html": "One reason I still like flowcharts.",
  "id": "60c2c71587848634af139292",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-11T02:14:45.747Z",
  "text": "One reason I still like flowcharts.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/BenjamenMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=60",
   "displayName": "Benjamen Meyer",
   "gv": "4",
   "id": "5e86b71dd73408ce4fdf0da2",
   "url": "/BenjamenMeyer",
   "username": "BenjamenMeyer",
   "v": 7
  },
  "html": "We probably need to have a VSObject as the base.",
  "id": "60c2c958bed13a2dba791c37",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-11T02:24:24.110Z",
  "text": "We probably need to have a VSObject as the base.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/BenjamenMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=60",
   "displayName": "Benjamen Meyer",
   "gv": "4",
   "id": "5e86b71dd73408ce4fdf0da2",
   "url": "/BenjamenMeyer",
   "username": "BenjamenMeyer",
   "v": 7
  },
  "html": "And then derive the tree from that",
  "id": "60c2c967bed13a2dba791c3b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-11T02:24:39.552Z",
  "text": "And then derive the tree from that\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/Loki1950",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/21045314?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/21045314?v=4&s=60",
   "displayName": "Loki1950",
   "gv": "4",
   "id": "5e90e822d73408ce4fe00596",
   "url": "/Loki1950",
   "username": "Loki1950",
   "v": 903
  },
  "html": "Have feeling we will find more than one stem to that tree.",
  "id": "60c2c9afb31731135422e944",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-11T02:25:51.821Z",
  "text": "Have feeling we will find more than one stem to that tree.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/BenjamenMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=60",
   "displayName": "Benjamen Meyer",
   "gv": "4",
   "id": "5e86b71dd73408ce4fdf0da2",
   "url": "/BenjamenMeyer",
   "username": "BenjamenMeyer",
   "v": 7
  },
  "html": "Yes we may need to have another tree related to PyObject to build out a parallel Python system more properly.",
  "id": "60c2d0f9d20143617e3b3c41",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-11T02:56:57.093Z",
  "text": "Yes we may need to have another tree related to PyObject to build out a parallel Python system more properly.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/BenjamenMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=60",
   "displayName": "Benjamen Meyer",
   "gv": "4",
   "id": "5e86b71dd73408ce4fdf0da2",
   "url": "/BenjamenMeyer",
   "username": "BenjamenMeyer",
   "v": 7
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"ministerofinformation\" class=\"mention\">@ministerofinformation</span> I&#39;m keen to know how things currently relate and how they should relate",
  "id": "60c2d177bed13a2dba792c21",
  "issues": [],
  "mentions": [
   {
    "screenName": "ministerofinformation",
    "userId": "5f19fc4ad73408ce4fea6452",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-11T02:59:03.112Z",
  "text": "@ministerofinformation I'm keen to know how things currently relate and how they should relate\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 25
  },
  "html": "Yeah, there are some other moving parts on the python side too - the pan-system level modeling of what units/flightgroups currently exist in which systems, the creation of additional units, off-screen combat handled in python in systems distant from the player...",
  "id": "60c2d893d161a54f050bfd0f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-11T03:29:23.489Z",
  "text": "Yeah, there are some other moving parts on the python side too - the pan-system level modeling of what units/flightgroups currently exist in which systems, the creation of additional units, off-screen combat handled in python in systems distant from the player...",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 25
  },
  "html": "Having a single virtual class VSObject root is useful if that&#39;s where all the allocation/utility function (e.g. hash)/etc. is going to hook in, but a common class of that sort can always be added to turn a forest into a tree, so we can think about what exactly goes into that class last",
  "id": "60c2d9924fc7ad136ac45275",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-11T03:33:38.096Z",
  "text": "Having a single virtual class VSObject root is useful if that's where all the allocation/utility function (e.g. hash)/etc. is going to hook in, but a common class of that sort can always be added to turn a forest into a tree, so we can think about what exactly goes into that class last",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 25
  },
  "html": "Also, if we go all the way up to VSObject, that will also include a lot of non-unit entities, e.g. base interface entities, audio, etc.",
  "id": "60c2dafcd161a54f050c0192",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-11T03:39:40.692Z",
  "text": "Also, if we go all the way up to VSObject, that will also include a lot of non-unit entities, e.g. base interface entities, audio, etc.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 25
  },
  "html": "So, maybe at a level below VSObject, there&#39;s a SimObject or similar?",
  "id": "60c2db49a5d5740d611b2cb7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-11T03:40:57.503Z",
  "text": "So, maybe at a level below VSObject, there's a SimObject or similar?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 25
  },
  "html": "As to how things currently relate... I&#39;m not sure I remember myself, entirely, but I can start by discussing at least one aspect of the path things took to get here for a particular collection of features, namely, upgrades.<br>Currently, upgrades are units with stats but no graphical or physical presence. The current upgrade system was derived in part from the cargo system, but there used to be a much simpler, but much more constrained upgrade system (let&#39;s call this Upg_Priv). in Upg_Priv, you didn&#39;t need to record what upgrades you had because you could re-derive them from your current stats and base unit class stats. This worked because each set of upgrades in the Upg_Priv touched disjoint sets of stats from other upgrades and was either a replacement or additive with respect to the base unit class stats. This was acceptable at the time of Upg_Priv being implemented because... that&#39;s all you need to model the upgrades in Privateer.",
  "id": "60c2dee1c705e53c1c8628ce",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-11T03:56:17.247Z",
  "text": "As to how things currently relate... I'm not sure I remember myself, entirely, but I can start by discussing at least one aspect of the path things took to get here for a particular collection of features, namely, upgrades.\nCurrently, upgrades are units with stats but no graphical or physical presence. The current upgrade system was derived in part from the cargo system, but there used to be a much simpler, but much more constrained upgrade system (let's call this Upg_Priv). in Upg_Priv, you didn't need to record what upgrades you had because you could re-derive them from your current stats and base unit class stats. This worked because each set of upgrades in the Upg_Priv touched disjoint sets of stats from other upgrades and was either a replacement or additive with respect to the base unit class stats. This was acceptable at the time of Upg_Priv being implemented because... that's all you need to model the upgrades in Privateer.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 25
  },
  "html": "However, since the specific upgrades were never stored, Upg_Priv was prone to bugs in the repair &amp; refuel code if the invariants were ever not enforced or the wrong additive/replacement assumption was made. It was also inflexible in allowing tradeoffs among different upgrades that both increased and decreased different stats, etc. So, rather than build a new system for upgrades to replace the old one, the first revision just hijacked the cargo system, which already had a list of non-modeled units associated with a given unit.",
  "id": "60c2dfe087848634af13c5f0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-11T04:00:32.004Z",
  "text": "However, since the specific upgrades were never stored, Upg_Priv was prone to bugs in the repair & refuel code if the invariants were ever not enforced or the wrong additive/replacement assumption was made. It was also inflexible in allowing tradeoffs among different upgrades that both increased and decreased different stats, etc. So, rather than build a new system for upgrades to replace the old one, the first revision just hijacked the cargo system, which already had a list of non-modeled units associated with a given unit.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 25
  },
  "html": "Now, in terms of what we may want the engine to handle... upgrades are potentially complicated, because some data sets may want them to exist physically (Look, there&#39;s the extra set of engines) and other data sets may not (upgrades are just stats)",
  "id": "60c2e0f25e8dfc4f117565bd",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-11T04:05:06.472Z",
  "text": "Now, in terms of what we may want the engine to handle... upgrades are potentially complicated, because some data sets may want them to exist physically (Look, there's the extra set of engines) and other data sets may not (upgrades are just stats)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 25
  },
  "html": "(we can&#39;t really do the former, currently)",
  "id": "60c2e13ed20143617e3b5dfe",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-11T04:06:22.161Z",
  "text": "(we can't really do the former, currently)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 25
  },
  "html": "In the same vein, the support for subunits may have seemed like a logical place to have added upgrades, rather than as cargo (then we&#39;d cover physical existence as well as stats)... except that subunits are really separate units with independent stats bound to common physics bases and in a hierarchy of how agency is applied (subunits don&#39;t actually affect the stats of the parent unit, hence all the turrets have to magically contain their own reactor stats, etc.)",
  "id": "60c2e23d4fc7ad136ac4643f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-11T04:10:37.854Z",
  "text": "In the same vein, the support for subunits may have seemed like a logical place to have added upgrades, rather than as cargo (then we'd cover physical existence as well as stats)... except that subunits are really separate units with independent stats bound to common physics bases and in a hierarchy of how agency is applied (subunits don't actually affect the stats of the parent unit, hence all the turrets have to magically contain their own reactor stats, etc.)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 25
  },
  "html": "Now, the other fun thing to consider is that the upgrades don&#39;t currently have any effect on the stats for the offscreen python objects used to model flight-group on flight-group engagements in distant systems...",
  "id": "60c2e2b9d161a54f050c1086",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-11T04:12:41.097Z",
  "text": "Now, the other fun thing to consider is that the upgrades don't currently have any effect on the stats for the offscreen python objects used to model flight-group on flight-group engagements in distant systems...",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 25
  },
  "html": "which actually use a different set of stats from the modeled units anyway -- which was always going to be a nasty consistency issue on the data side if there&#39;s a retcon/rebalance of some vessel on one but not the other",
  "id": "60c2e2fca5d5740d611b3ae7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-11T04:13:48.936Z",
  "text": "which actually use a different set of stats from the modeled units anyway -- which was always going to be a nasty consistency issue on the data side if there's a retcon/rebalance of some vessel on one but not the other",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 25
  },
  "html": "This level of future-fixing/future-proofing is probably worth pondering in the new hierarchies. Performance optimization-vs-abstraction considerations (e.g. does class FOO have XYZ coordinates as a member, or does it have an index into a global coordinate matrix that&#39;s used directly by linear algebra kernels) probably aren&#39;t worth worrying about too much unless they entail lots of object construction/destruction overheads (e.g. are we creating and destroying 10K objects each frame to encapsulate a behavior in a specialized object vs. running a method 10K times on a collection of existing objects, etc.)",
  "id": "60c2e4b8c705e53c1c863415",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-11T04:21:12.803Z",
  "text": "This level of future-fixing/future-proofing is probably worth pondering in the new hierarchies. Performance optimization-vs-abstraction considerations (e.g. does class FOO have XYZ coordinates as a member, or does it have an index into a global coordinate matrix that's used directly by linear algebra kernels) probably aren't worth worrying about too much unless they entail lots of object construction/destruction overheads (e.g. are we creating and destroying 10K objects each frame to encapsulate a behavior in a specialized object vs. running a method 10K times on a collection of existing objects, etc.)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 25
  },
  "html": "But, back to visualization and whiteboards - would people be averse to starting, say, a jamboard or equivalent to start mapping out the key properties of the desired organization in a collaborative visual platform?",
  "id": "60c2e693b346e9618bc584a8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-11T04:29:07.562Z",
  "text": "But, back to visualization and whiteboards - would people be averse to starting, say, a jamboard or equivalent to start mapping out the key properties of the desired organization in a collaborative visual platform?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/royfalk",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/10576016?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/10576016?v=4&s=60",
   "displayName": "Roy Falk",
   "gv": "4",
   "id": "5e90c356d73408ce4fe000f6",
   "url": "/royfalk",
   "username": "royfalk",
   "v": 21
  },
  "html": "<p>I think that if we&#39;re refactoring, we can have upgrades, cargo and subunits as separate classes, maybe inheriting from a common super-class.<br>I don&#39;t mind inputs and brainstorming but I&#39;m already refactoring it now, so it should be more of a direction to go in then hard lines. It&#39;s hard enough to decouple what we currently have.<br>Honestly, even the direction I took with many multiple inheritance is saner than what we have.<br>I especially like the separation to entities. nice idea.</p><p>As for code style - like I said, I like google because they have a tool and not for any other reason. The LK code style is I think irrelevant as it doesn&#39;t cover C++ but C. Even if there&#39;s a tool, it probably won&#39;t work for us. Also, it doesn&#39;t cover classes, methods, fields, etc.</p>",
  "id": "60c3057cbed13a2dba79929a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-11T06:41:00.949Z",
  "text": "I think that if we're refactoring, we can have upgrades, cargo and subunits as separate classes, maybe inheriting from a common super-class.\nI don't mind inputs and brainstorming but I'm already refactoring it now, so it should be more of a direction to go in then hard lines. It's hard enough to decouple what we currently have.\nHonestly, even the direction I took with many multiple inheritance is saner than what we have. \nI especially like the separation to entities. nice idea.\n\nAs for code style - like I said, I like google because they have a tool and not for any other reason. The LK code style is I think irrelevant as it doesn't cover C++ but C. Even if there's a tool, it probably won't work for us. Also, it doesn't cover classes, methods, fields, etc.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/BenjamenMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=60",
   "displayName": "Benjamen Meyer",
   "gv": "4",
   "id": "5e86b71dd73408ce4fdf0da2",
   "url": "/BenjamenMeyer",
   "username": "BenjamenMeyer",
   "v": 7
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"ministerofinformation\" class=\"mention\">@ministerofinformation</span> I would assume that if we did a VSObject that the next level would be a major separation of concerns; so not everything would be at that top level. It&#39;s just an easy way to make sure that we can hand around, type, etc - kind of like QObject in Qt and GObject in Gtk/Gtk+.",
  "id": "60c38ea1a5d5740d611cd021",
  "issues": [],
  "mentions": [
   {
    "screenName": "ministerofinformation",
    "userId": "5f19fc4ad73408ce4fea6452",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-11T16:26:09.906Z",
  "text": "@ministerofinformation I would assume that if we did a VSObject that the next level would be a major separation of concerns; so not everything would be at that top level. It's just an easy way to make sure that we can hand around, type, etc - kind of like QObject in Qt and GObject in Gtk/Gtk+.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/royfalk",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/10576016?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/10576016?v=4&s=60",
   "displayName": "Roy Falk",
   "gv": "4",
   "id": "5e90c356d73408ce4fe000f6",
   "url": "/royfalk",
   "username": "royfalk",
   "v": 21
  },
  "html": "Could someone explain why we need a root object like that. Bjarne noted this is one of the limitations of Java.I\u2019m not against, just trying to understand the advantage.",
  "id": "60c3a14d56df183c230c6abd",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-11T17:45:49.696Z",
  "text": "Could someone explain why we need a root object like that. Bjarne noted this is one of the limitations of Java.I\u2019m not against, just trying to understand the advantage.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 25
  },
  "html": "I don&#39;t think we NEED a single common root. However, if we find that there are a collection of duplicated functionalities (for example, being hashable or for handling VS-specific allocator/de-allocator codes) then these would be the functionalities that could be factored up and into a common root. The level below that common root is the one that would presumably have the most important set of semantic distinctions. The chief benefit of a common (modifiable, distinct from Java&#39;s Object root class) root, in my opinion, is that it makes adding any NEW global feature easy.",
  "id": "60c3a2874fc7ad136ac63547",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-11T17:51:03.278Z",
  "text": "I don't think we NEED a single common root. However, if we find that there are a collection of duplicated functionalities (for example, being hashable or for handling VS-specific allocator/de-allocator codes) then these would be the functionalities that could be factored up and into a common root. The level below that common root is the one that would presumably have the most important set of semantic distinctions. The chief benefit of a common (modifiable, distinct from Java's Object root class) root, in my opinion, is that it makes adding any NEW global feature easy.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/BenjamenMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=60",
   "displayName": "Benjamen Meyer",
   "gv": "4",
   "id": "5e86b71dd73408ce4fdf0da2",
   "url": "/BenjamenMeyer",
   "username": "BenjamenMeyer",
   "v": 7
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"royfalk\" class=\"mention\">@royfalk</span> the advantage of hhaving VSObject (and VSPyObject) is that you can easily pass around a pointer any where by having the common root. VSObject would be something that would contain very little actual information - e.g an object name, type, parent/child relationships, etc. Qt uses QObject to do parent/child relationships and handle memory allocation that way - a parent is always responsible for deleting its children so it creates a kind of GC (parent goes away, so do all the children) that is actually very efficient and doesn&#39;t hit back at the wrong time (great for embedded systems). Now, I&#39;m not saying we implement the parent/child relationship that way - just pointing out one possible use.",
  "id": "60c3ad5b5e8dfc4f11774c66",
  "issues": [],
  "mentions": [
   {
    "screenName": "royfalk",
    "userId": "5e90c356d73408ce4fe000f6",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-11T18:37:15.274Z",
  "text": "@royfalk the advantage of hhaving VSObject (and VSPyObject) is that you can easily pass around a pointer any where by having the common root. VSObject would be something that would contain very little actual information - e.g an object name, type, parent/child relationships, etc. Qt uses QObject to do parent/child relationships and handle memory allocation that way - a parent is always responsible for deleting its children so it creates a kind of GC (parent goes away, so do all the children) that is actually very efficient and doesn't hit back at the wrong time (great for embedded systems). Now, I'm not saying we implement the parent/child relationship that way - just pointing out one possible use.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/BenjamenMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=60",
   "displayName": "Benjamen Meyer",
   "gv": "4",
   "id": "5e86b71dd73408ce4fdf0da2",
   "url": "/BenjamenMeyer",
   "username": "BenjamenMeyer",
   "v": 7
  },
  "html": "Essentially, and this is the bigger thing, any function/operator can take a VSObject as a parameter and then decide if it&#39;s the right kind of VSObject.",
  "id": "60c3ad7bc705e53c1c882589",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-11T18:37:47.402Z",
  "text": "Essentially, and this is the bigger thing, any function/operator can take a VSObject as a parameter and then decide if it's the right kind of VSObject.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/BenjamenMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=60",
   "displayName": "Benjamen Meyer",
   "gv": "4",
   "id": "5e86b71dd73408ce4fdf0da2",
   "url": "/BenjamenMeyer",
   "username": "BenjamenMeyer",
   "v": 7
  },
  "html": "Re: Java - Java does that as a language which isn&#39;t very beneficial in the end. However, within a framework (Qt, Gtk/Gtk+) it&#39;s very beneficial. The difference is that if you need to break that for your framework you can do so; while at the language level you can&#39;t.",
  "id": "60c3adb33169e234985e7f9f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-11T18:38:43.054Z",
  "text": "Re: Java - Java does that as a language which isn't very beneficial in the end. However, within a framework (Qt, Gtk/Gtk+) it's very beneficial. The difference is that if you need to break that for your framework you can do so; while at the language level you can't.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/BenjamenMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=60",
   "displayName": "Benjamen Meyer",
   "gv": "4",
   "id": "5e86b71dd73408ce4fdf0da2",
   "url": "/BenjamenMeyer",
   "username": "BenjamenMeyer",
   "v": 7
  },
  "html": "And no, I&#39;m not advocating that we only hand around VSObject/VSPyObject objects; but it may make sense at certain levels to only operate on those kinds of things (e.g. switching between Audio processing and Physics processing in the main loop - you&#39;re just operating on VSObjects using a standardized interface instead of having to specifically know each object by name).",
  "id": "60c3ae0556df183c230c88d8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-11T18:40:05.306Z",
  "text": "And no, I'm not advocating that we only hand around VSObject/VSPyObject objects; but it may make sense at certain levels to only operate on those kinds of things (e.g. switching between Audio processing and Physics processing in the main loop - you're just operating on VSObjects using a standardized interface instead of having to specifically know each object by name).",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/BenjamenMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=60",
   "displayName": "Benjamen Meyer",
   "gv": "4",
   "id": "5e86b71dd73408ce4fdf0da2",
   "url": "/BenjamenMeyer",
   "username": "BenjamenMeyer",
   "v": 7
  },
  "html": "you can also centralize error handling (eg getError()) or other kinds of things. It&#39;s also easy to build in while we build out the tree and then if we find we don&#39;t need it we can take it out. It&#39;s harder to add it later (but not by much)",
  "id": "60c3ae5cc705e53c1c882768",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-11T18:41:32.581Z",
  "text": "you can also centralize error handling (eg getError()) or other kinds of things. It's also easy to build in while we build out the tree and then if we find we don't need it we can take it out. It's harder to add it later (but not by much)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2021-06-11T18:45:37.660Z",
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 25
  },
  "html": "<blockquote>\n<p>you can also centralize error handling (eg getError()) or other kinds of things.</p></blockquote>\n<p>I think that this alone makes it worthwhile to have a common framework root, even if not strictly necessary - there&#39;s always going to be error handling/reporting/debugging, logging/profiling, bookeeping bits that benefit from centralization</p>",
  "id": "60c3af3b4fc7ad136ac65604",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-11T18:45:15.879Z",
  "text": "> you can also centralize error handling (eg getError()) or other kinds of things.\n\nI think that this alone makes it worthwhile to have a common framework root, even if not strictly necessary - there's always going to be error handling/reporting/debugging, logging/profiling, bookeeping bits that benefit from centralization",
  "unread": false,
  "urls": [],
  "v": 3
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/royfalk",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/10576016?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/10576016?v=4&s=60",
   "displayName": "Roy Falk",
   "gv": "4",
   "id": "5e90c356d73408ce4fe000f6",
   "url": "/royfalk",
   "username": "royfalk",
   "v": 21
  },
  "html": "Ah. I am enlightened.",
  "id": "60c3b0c1c705e53c1c882df4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-11T18:51:45.717Z",
  "text": "Ah. I am enlightened.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/BenjamenMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=60",
   "displayName": "Benjamen Meyer",
   "gv": "4",
   "id": "5e86b71dd73408ce4fdf0da2",
   "url": "/BenjamenMeyer",
   "username": "BenjamenMeyer",
   "v": 7
  },
  "html": "remember, in doing this classes need to be limited in size to only what&#39;s necessary - I don&#39;t want to see huge classes that do everything - even VSObject should be rather small",
  "id": "60c3bcf1bed13a2dba7b527d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-11T19:43:45.422Z",
  "text": "remember, in doing this classes need to be limited in size to only what's necessary - I don't want to see huge classes that do everything - even VSObject should be rather small",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/BenjamenMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=60",
   "displayName": "Benjamen Meyer",
   "gv": "4",
   "id": "5e86b71dd73408ce4fdf0da2",
   "url": "/BenjamenMeyer",
   "username": "BenjamenMeyer",
   "v": 7
  },
  "html": "I&#39;d also like to see us doing more 1 file/class (well, 1 implementation + 1 header) kind of thing unless we have a static definition that limits it to internal to that file.",
  "id": "60c3bdec56df183c230caf0c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-11T19:47:56.161Z",
  "text": "I'd also like to see us doing more 1 file/class (well, 1 implementation + 1 header) kind of thing unless we have a static definition that limits it to internal to that file.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 25
  },
  "html": "<blockquote>\n<p>remember, in doing this classes need to be limited in size to only what&#39;s necessary - I don&#39;t want to see huge classes that do everything - even VSObject should be rather small</p></blockquote>\n<p>So, if there is a large amount of common functionality that&#39;s getting pushed up to the top node in the hierarchy that&#39;s causing code-bloat in VSObject, then one option to manage complexity is to switch to a delegation model (i.e. member instances of utility classes), but do that at the top with VSObject</p>",
  "id": "60c3bdf9bed13a2dba7b5463",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-11T19:48:09.819Z",
  "text": "> remember, in doing this classes need to be limited in size to only what's necessary - I don't want to see huge classes that do everything - even VSObject should be rather small\n\nSo, if there is a large amount of common functionality that's getting pushed up to the top node in the hierarchy that's causing code-bloat in VSObject, then one option to manage complexity is to switch to a delegation model (i.e. member instances of utility classes), but do that at the top with VSObject",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 25
  },
  "html": "<blockquote>\n<p>I&#39;d also like to see us doing more 1 file/class (well, 1 implementation + 1 header) kind of thing unless we have a static definition that limits it to internal to that file.</p></blockquote>\n<p>I strongly second this!</p>",
  "id": "60c3be07d855766185d13349",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-11T19:48:23.121Z",
  "text": "> I'd also like to see us doing more 1 file/class (well, 1 implementation + 1 header) kind of thing unless we have a static definition that limits it to internal to that file.\n\nI strongly second this!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/stephengtuggy",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=60",
   "displayName": "Stephen G Tuggy",
   "gv": "4",
   "id": "5664891716b6c7089cbda6c8",
   "url": "/stephengtuggy",
   "username": "stephengtuggy",
   "v": 38
  },
  "html": "<blockquote>\n<p>Just as an off the cuff brainstorm, one possible set of roots to consider would be to have {GameLogicEntity, PhysicsEngineEntity, GraphicsEngineEntity}, each with subclasses, and then a given Unit just points to a GameLogicEntity, PhysicsEngineEntity and a GraphicsEngineEntity -- this is similar to your superclass-as-field direction, but would entail a rethinking of what functions would need to operate across all Units (things modeled at some level), vs. across all GameLogicEntities (things with stats), PhysicsEngineEntities (things that can interact with physics), etc. vs only subclasses of the above (e.g iterating across all PhysicsEngineEntities::CollideableWithOthers::CollideableWithSelf). </p></blockquote>\n<p>This begins to sound like an ECS, or Entity Component System -- a common feature in modern game design, as I understand it.</p><p>(Sorry, have some catching up to do here)</p>",
  "id": "60c42213b31731135425fc16",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-12T02:55:15.362Z",
  "text": "> Just as an off the cuff brainstorm, one possible set of roots to consider would be to have {GameLogicEntity, PhysicsEngineEntity, GraphicsEngineEntity}, each with subclasses, and then a given Unit just points to a GameLogicEntity, PhysicsEngineEntity and a GraphicsEngineEntity -- this is similar to your superclass-as-field direction, but would entail a rethinking of what functions would need to operate across all Units (things modeled at some level), vs. across all GameLogicEntities (things with stats), PhysicsEngineEntities (things that can interact with physics), etc. vs only subclasses of the above (e.g iterating across all PhysicsEngineEntities::CollideableWithOthers::CollideableWithSelf). \n\nThis begins to sound like an ECS, or Entity Component System -- a common feature in modern game design, as I understand it.\n\n(Sorry, have some catching up to do here)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/stephengtuggy",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=60",
   "displayName": "Stephen G Tuggy",
   "gv": "4",
   "id": "5664891716b6c7089cbda6c8",
   "url": "/stephengtuggy",
   "username": "stephengtuggy",
   "v": 38
  },
  "html": "<blockquote>\n<p>I don&#39;t think we NEED a single common root. However, if we find that there are a collection of duplicated functionalities (for example, being hashable or for handling VS-specific allocator/de-allocator codes) then these would be the functionalities that could be factored up and into a common root. The level below that common root is the one that would presumably have the most important set of semantic distinctions. The chief benefit of a common (modifiable, distinct from Java&#39;s Object root class) root, in my opinion, is that it makes adding any NEW global feature easy.</p></blockquote>\n<p>An ECS also makes adding any new global feature easy. :-)</p>",
  "id": "60c422f0d20143617e3e45cd",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-12T02:58:56.235Z",
  "text": "> I don't think we NEED a single common root. However, if we find that there are a collection of duplicated functionalities (for example, being hashable or for handling VS-specific allocator/de-allocator codes) then these would be the functionalities that could be factored up and into a common root. The level below that common root is the one that would presumably have the most important set of semantic distinctions. The chief benefit of a common (modifiable, distinct from Java's Object root class) root, in my opinion, is that it makes adding any NEW global feature easy.\n\nAn ECS also makes adding any new global feature easy. :-)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/stephengtuggy",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=60",
   "displayName": "Stephen G Tuggy",
   "gv": "4",
   "id": "5664891716b6c7089cbda6c8",
   "url": "/stephengtuggy",
   "username": "stephengtuggy",
   "v": 38
  },
  "html": "<blockquote>\n<p>And no, I&#39;m not advocating that we only hand around VSObject/VSPyObject objects; but it may make sense at certain levels to only operate on those kinds of things (e.g. switching between Audio processing and Physics processing in the main loop - you&#39;re just operating on VSObjects using a standardized interface instead of having to specifically know each object by name).</p></blockquote>\n<p>Again, this sounds like what an ECS-architected game does. ;-)</p>",
  "id": "60c42312d855766185d20649",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-12T02:59:30.757Z",
  "text": "> And no, I'm not advocating that we only hand around VSObject/VSPyObject objects; but it may make sense at certain levels to only operate on those kinds of things (e.g. switching between Audio processing and Physics processing in the main loop - you're just operating on VSObjects using a standardized interface instead of having to specifically know each object by name).\n\nAgain, this sounds like what an ECS-architected game does. ;-)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/stephengtuggy",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=60",
   "displayName": "Stephen G Tuggy",
   "gv": "4",
   "id": "5664891716b6c7089cbda6c8",
   "url": "/stephengtuggy",
   "username": "stephengtuggy",
   "v": 38
  },
  "html": "<blockquote>\n<blockquote>\n<p>I&#39;d also like to see us doing more 1 file/class (well, 1 implementation + 1 header) kind of thing unless we have a static definition that limits it to internal to that file.</p></blockquote>\n<p>I strongly second this!</p></blockquote>\n<p>I agree!</p>",
  "id": "60c4234bc705e53c1c891861",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-12T03:00:27.306Z",
  "text": "> > I'd also like to see us doing more 1 file/class (well, 1 implementation + 1 header) kind of thing unless we have a static definition that limits it to internal to that file.\n> \n> I strongly second this!\n\nI agree!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/stephengtuggy",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=60",
   "displayName": "Stephen G Tuggy",
   "gv": "4",
   "id": "5664891716b6c7089cbda6c8",
   "url": "/stephengtuggy",
   "username": "stephengtuggy",
   "v": 38
  },
  "html": "Also: Guys, I think it&#39;s good that we&#39;re taking a big step back to look at the design of Vega Strike as a whole. Just found out that OpenGL is no longer supported in the latest versions of macOS, e.g. 10.14. O_O So we&#39;re going to need to replace OpenGL with something else. That is going to touch just about every aspect of the game, it seems to me -- OpenGL is thoroughly baked in.",
  "id": "60c423cd4fc7ad136ac74176",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-12T03:02:37.443Z",
  "text": "Also: Guys, I think it's good that we're taking a big step back to look at the design of Vega Strike as a whole. Just found out that OpenGL is no longer supported in the latest versions of macOS, e.g. 10.14. O_O So we're going to need to replace OpenGL with something else. That is going to touch just about every aspect of the game, it seems to me -- OpenGL is thoroughly baked in.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 25
  },
  "html": "Not sure I was thinking about things in a particularly ECS direction - ECS component addition --&gt; delegation is a viable way to get duck typing in C++ while maintaining single inheritance (i.e. not building a java-interface-esque system out of multiple virtual class ancestors to do the duck typing), but it wasn&#39;t at the top of my sleep-deprived brain at the time :) There&#39;s certainly a fair bit of room within the simulation where traditional single-inheritance subclassing should be natural (&quot;beams are a subclass of weapons are a subclass of upgrades&quot; sorts of things). I think it&#39;s worth exploring/reconsidering what these sorts of relationships could/should be and what picking a particular relationship for some of the common interactions will entail to help lead us to pick which overall paradigm (or paradigms) the codebase as a whole should lean towards adopting. One of the things that will hopefully come out of a holistic spelunking is a sense of how to separate some of the engine concerns better going forward. For instance, in my first off the cuff set of divisions, I entirely neglected agency (e.g. AI and user input) :-P",
  "id": "60c42952184fef617ae26df1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-12T03:26:10.735Z",
  "text": "Not sure I was thinking about things in a particularly ECS direction - ECS component addition --> delegation is a viable way to get duck typing in C++ while maintaining single inheritance (i.e. not building a java-interface-esque system out of multiple virtual class ancestors to do the duck typing), but it wasn't at the top of my sleep-deprived brain at the time :) There's certainly a fair bit of room within the simulation where traditional single-inheritance subclassing should be natural (\"beams are a subclass of weapons are a subclass of upgrades\" sorts of things). I think it's worth exploring/reconsidering what these sorts of relationships could/should be and what picking a particular relationship for some of the common interactions will entail to help lead us to pick which overall paradigm (or paradigms) the codebase as a whole should lean towards adopting. One of the things that will hopefully come out of a holistic spelunking is a sense of how to separate some of the engine concerns better going forward. For instance, in my first off the cuff set of divisions, I entirely neglected agency (e.g. AI and user input) :-P",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 25
  },
  "html": "<blockquote>\n<p>Just found out that OpenGL is no longer supported in the latest versions of macOS, e.g. 10.14. O_O So we&#39;re going to need to replace OpenGL with something else. That is going to touch just about every aspect of the game, it seems to me -- OpenGL is thoroughly baked in.</p></blockquote>\n<p>Vulkan, then, at some point? Or (mostly joking here) if we wait long enough to get around to it, WebGPU ;-)</p>",
  "id": "60c42bff747a772d99ec4757",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-12T03:37:35.044Z",
  "text": "> Just found out that OpenGL is no longer supported in the latest versions of macOS, e.g. 10.14. O_O So we're going to need to replace OpenGL with something else. That is going to touch just about every aspect of the game, it seems to me -- OpenGL is thoroughly baked in.\n\nVulkan, then, at some point? Or (mostly joking here) if we wait long enough to get around to it, WebGPU ;-)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/stephengtuggy",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=60",
   "displayName": "Stephen G Tuggy",
   "gv": "4",
   "id": "5664891716b6c7089cbda6c8",
   "url": "/stephengtuggy",
   "username": "stephengtuggy",
   "v": 38
  },
  "html": "I remember we discussed this whole thing in an issue on GitHub at some point. I&#39;ll see if I can find it.",
  "id": "60c42d1556df183c230d90f5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-12T03:42:13.162Z",
  "text": "I remember we discussed this whole thing in an issue on GitHub at some point. I'll see if I can find it.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/stephengtuggy",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=60",
   "displayName": "Stephen G Tuggy",
   "gv": "4",
   "id": "5664891716b6c7089cbda6c8",
   "url": "/stephengtuggy",
   "username": "stephengtuggy",
   "v": 38
  },
  "html": "It seems like other games (and game engines) have gone the direction of building a Vulkan-like abstraction that can run on any of OpenGL, DirectX, Vulkan itself, or Metal (the macOS thing).",
  "id": "60c42d4687848634af16b07c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-12T03:43:02.847Z",
  "text": "It seems like other games (and game engines) have gone the direction of building a Vulkan-like abstraction that can run on any of OpenGL, DirectX, Vulkan itself, or Metal (the macOS thing).",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/stephengtuggy",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=60",
   "displayName": "Stephen G Tuggy",
   "gv": "4",
   "id": "5664891716b6c7089cbda6c8",
   "url": "/stephengtuggy",
   "username": "stephengtuggy",
   "v": 38
  },
  "html": "BTW, I tentatively agree with <span data-link-type=\"mention\" data-screen-name=\"royfalk\" class=\"mention\">@royfalk</span> about adopting the Google code style and cpplint. I think it&#39;s a good idea.",
  "id": "60c4338087848634af16bc67",
  "issues": [],
  "mentions": [
   {
    "screenName": "royfalk",
    "userId": "5e90c356d73408ce4fe000f6",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-12T04:09:36.035Z",
  "text": "BTW, I tentatively agree with @royfalk about adopting the Google code style and cpplint. I think it's a good idea.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 25
  },
  "html": "I didn&#39;t see any feedback re: concurrent virtual whiteboard alternatives to Jamboard ( Jamboard not being quite what I&#39;d prefer -- too much like a real whiteboard wrt text) so, here&#39;s a Jamboard we can start doodling some class relations/notes/alternative hierarchies (using different frames) on if/when that helps people organize their thoughts: <a href=\"https://jamboard.google.com/d/1-Uvz8DnsJjQdPUpa8axlnY8b7dmxqqDalxkIJ2R9yXo/edit?usp=sharing\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link \">https://jamboard.google.com/d/1-Uvz8DnsJjQdPUpa8axlnY8b7dmxqqDalxkIJ2R9yXo/edit?usp=sharing</a>",
  "id": "60c4356587848634af16c037",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-12T04:17:41.056Z",
  "text": "I didn't see any feedback re: concurrent virtual whiteboard alternatives to Jamboard ( Jamboard not being quite what I'd prefer -- too much like a real whiteboard wrt text) so, here's a Jamboard we can start doodling some class relations/notes/alternative hierarchies (using different frames) on if/when that helps people organize their thoughts: https://jamboard.google.com/d/1-Uvz8DnsJjQdPUpa8axlnY8b7dmxqqDalxkIJ2R9yXo/edit?usp=sharing",
  "unread": false,
  "urls": [
   {
    "url": "https://jamboard.google.com/d/1-Uvz8DnsJjQdPUpa8axlnY8b7dmxqqDalxkIJ2R9yXo/edit?usp=sharing"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/stephengtuggy",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=60",
   "displayName": "Stephen G Tuggy",
   "gv": "4",
   "id": "5664891716b6c7089cbda6c8",
   "url": "/stephengtuggy",
   "username": "stephengtuggy",
   "v": 38
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"ministerofinformation\" class=\"mention\">@ministerofinformation</span> :+1: ",
  "id": "60c43e2ad855766185d236e9",
  "issues": [],
  "mentions": [
   {
    "screenName": "ministerofinformation",
    "userId": "5f19fc4ad73408ce4fea6452",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-12T04:55:06.408Z",
  "text": "@ministerofinformation :+1: ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/BenjamenMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=60",
   "displayName": "Benjamen Meyer",
   "gv": "4",
   "id": "5e86b71dd73408ce4fdf0da2",
   "url": "/BenjamenMeyer",
   "username": "BenjamenMeyer",
   "v": 7
  },
  "html": "Yes we&#39;d like to move to Vulkan. OpenGL still exists in the Vulkan world IIRC.",
  "id": "60c4443656df183c230dbb8e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-12T05:20:54.965Z",
  "text": "Yes we'd like to move to Vulkan. OpenGL still exists in the Vulkan world IIRC.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/BenjamenMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=60",
   "displayName": "Benjamen Meyer",
   "gv": "4",
   "id": "5e86b71dd73408ce4fdf0da2",
   "url": "/BenjamenMeyer",
   "username": "BenjamenMeyer",
   "v": 7
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"ministerofinformation\" class=\"mention\">@ministerofinformation</span> cool...didn&#39;t know about Jamboard. Looks great.",
  "id": "60c444a6184fef617ae2a1a5",
  "issues": [],
  "mentions": [
   {
    "screenName": "ministerofinformation",
    "userId": "5f19fc4ad73408ce4fea6452",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-12T05:22:46.385Z",
  "text": "@ministerofinformation cool...didn't know about Jamboard. Looks great.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 25
  },
  "html": "A couple of quick thoughts popping back to an earlier comment re: Unit vs. Subunit being different classes: I think that would cover how they&#39;re currently used, but I think that may not ultimately be the best split (it may still be a useful split, but only as part of a larger constellation of changes that would make the current nomenclature a bit confusing). For small craft with a single logical loci of control/action generation and a tree topology underneath it&#39;s workable, but consider the following examples for why this might not be the best paradigm to use long term: 1) [agglomerative case] A fully modeled, damaged cargo container is floating in space (logically, a Unit, in current parlance). This cargo unit is then docked-while-modeled onto a cargo transporting unit -- should a subunit then be derived (preserving damage, etc.) and the original Unit deleted? Taken further, imagine that it&#39;s not a single cargo container, but a piece of a station, with it&#39;s own subunit hierarchy, and it&#39;s being towed by a transport tug, train-style, inserted somewhere into the sequence of &quot;train cars&quot; -- would we then reinstantiate &amp; destroy the set of affected trees/subtrees? 2) [disassociative case] Consider Next Generation+ era Galaxy class starships, wherein the saucer and remainder of the craft can be operated independently. While the bridge is the primary controller when attached, does that make the other piece a subunit? Under current unit/subunit rules, if the unit is destroyed, the subunit tree is also destroyed, but we would prefer to be modeling a case where either portion of the ship being functional means that it still exists, so that doesn&#39;t really match the unit/subunit model.<br>...<br>Unless we change the meaning of unit and subunit somewhat radically, wherein pretty much everything we think of as a unit is a collection of subunits and unit is the name for a new &quot;gestalt&quot; modeling class that just manages a collection of subunits and the graph(s) of the relationship(s) among them. Even then, there are clearly differentiations among the subunits in terms of whether they&#39;re coordinators/pass-through/minions with respect to issuing and executing commands - but even that could be conditional (see, again, case 2) above).",
  "id": "60ca30bab3173113543310c4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-16T17:11:22.781Z",
  "text": "A couple of quick thoughts popping back to an earlier comment re: Unit vs. Subunit being different classes: I think that would cover how they're currently used, but I think that may not ultimately be the best split (it may still be a useful split, but only as part of a larger constellation of changes that would make the current nomenclature a bit confusing). For small craft with a single logical loci of control/action generation and a tree topology underneath it's workable, but consider the following examples for why this might not be the best paradigm to use long term: 1) [agglomerative case] A fully modeled, damaged cargo container is floating in space (logically, a Unit, in current parlance). This cargo unit is then docked-while-modeled onto a cargo transporting unit -- should a subunit then be derived (preserving damage, etc.) and the original Unit deleted? Taken further, imagine that it's not a single cargo container, but a piece of a station, with it's own subunit hierarchy, and it's being towed by a transport tug, train-style, inserted somewhere into the sequence of \"train cars\" -- would we then reinstantiate & destroy the set of affected trees/subtrees? 2) [disassociative case] Consider Next Generation+ era Galaxy class starships, wherein the saucer and remainder of the craft can be operated independently. While the bridge is the primary controller when attached, does that make the other piece a subunit? Under current unit/subunit rules, if the unit is destroyed, the subunit tree is also destroyed, but we would prefer to be modeling a case where either portion of the ship being functional means that it still exists, so that doesn't really match the unit/subunit model.\n...\nUnless we change the meaning of unit and subunit somewhat radically, wherein pretty much everything we think of as a unit is a collection of subunits and unit is the name for a new \"gestalt\" modeling class that just manages a collection of subunits and the graph(s) of the relationship(s) among them. Even then, there are clearly differentiations among the subunits in terms of whether they're coordinators/pass-through/minions with respect to issuing and executing commands - but even that could be conditional (see, again, case 2) above).",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/royfalk",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/10576016?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/10576016?v=4&s=60",
   "displayName": "Roy Falk",
   "gv": "4",
   "id": "5e90c356d73408ce4fe000f6",
   "url": "/royfalk",
   "username": "royfalk",
   "v": 21
  },
  "html": "I think the solution to this is to stop thinking about anything as a unit. We need to stop doing that and this would simplify the understanding of what something is. I think my model wasn&#39;t as bad as I thought but may need some tweaking as we proceed. Instead of unit, we&#39;ll have actual meaningful game classes - planet, station, ship, missile, etc. A planet can&#39;t be damaged. Stations may be damaged but not destroyed (if critical to plot). Ships can be damaged and destroyed.<br>As I suggested before let turret be turret, sub-unit is part of a ship or station, module is something like a radar and cargo is cargo.<br>As for more complex scenarios like you&#39;ve described - I think we&#39;re a few years away from that. Once I finish with the technical debt, I&#39;d like to focus on tools for world building, campaign building and a better conversation model.",
  "id": "60ca51dab346e9618bd5e1d8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-16T19:32:42.988Z",
  "text": "I think the solution to this is to stop thinking about anything as a unit. We need to stop doing that and this would simplify the understanding of what something is. I think my model wasn't as bad as I thought but may need some tweaking as we proceed. Instead of unit, we'll have actual meaningful game classes - planet, station, ship, missile, etc. A planet can't be damaged. Stations may be damaged but not destroyed (if critical to plot). Ships can be damaged and destroyed. \nAs I suggested before let turret be turret, sub-unit is part of a ship or station, module is something like a radar and cargo is cargo. \nAs for more complex scenarios like you've described - I think we're a few years away from that. Once I finish with the technical debt, I'd like to focus on tools for world building, campaign building and a better conversation model.\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2021-06-16T21:27:08.921Z",
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/BenjamenMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=60",
   "displayName": "Benjamen Meyer",
   "gv": "4",
   "id": "5e86b71dd73408ce4fdf0da2",
   "url": "/BenjamenMeyer",
   "username": "BenjamenMeyer",
   "v": 7
  },
  "html": " I agree with <span data-link-type=\"mention\" data-screen-name=\"royfalk\" class=\"mention\">@royfalk</span>",
  "id": "60ca6ca5d20143617e4c081b",
  "issues": [],
  "mentions": [
   {
    "screenName": "royfalk",
    "userId": "5e90c356d73408ce4fe000f6",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-16T21:27:01.799Z",
  "text": " I agree with @royfalk",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/BenjamenMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=60",
   "displayName": "Benjamen Meyer",
   "gv": "4",
   "id": "5e86b71dd73408ce4fdf0da2",
   "url": "/BenjamenMeyer",
   "username": "BenjamenMeyer",
   "v": 7
  },
  "html": "and it&#39;ll be part of how the tree of objects falls out",
  "id": "60ca6cc2d161a54f051ca3a0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-16T21:27:30.530Z",
  "text": "and it'll be part of how the tree of objects falls out",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 25
  },
  "html": "<p>Dividing into meaningful game classes is fine, but I still think we should consider doing some futureproofing if/where it&#39;s cheap (in particular, having some use-case examples to ensure that what we&#39;re building is organizationally compatible with future goals without another complete organizational redesign would be a good thing to develop in general). I think we will therefore benefit from spending some time and effort figuring out what that set of meaningful game classes <em>should</em> be, independent of not only what the current set of classes is but also the current set of game assets. Moreover, we need to make sure we don&#39;t induce too many feature regressions where we&#39;re currently taking advantage of non-specialization of classes (e.g. fighter bays currently work by being missile launchers armed with fighters as ammo - if we make missiles distinct, we may need to provide an alternative mechanism)</p><p>As a bit of a tangential rabbit-hole, I don&#39;t see being damaged as a differentiating feature for stations vs. ships (being able to support immortality for plot purposes seems a global need for world-building support that is not distinct to a particular sub-type of object -- even cargo containers could have macguffin status). Depending on what is meant by &quot;station&quot; then the difference would seem to be either A) is in an orbital relationship to system objects rather than independently moving or B) has a base interface when docked. The set of objects in A) have distinct relationships with both the physics modeling and the inter-system strategic modeling codes (e.g. change of unit type on system takeover by another faction) and the generated system cache/save-load (I don&#39;t think we actually record destroyed stations permanently, so they&#39;ll currently pop back into existence once a system is de-instantiated and loaded back in - which is not a desired long-term feature). B) isn&#39;t as interesting a differentiation.</p><p>:-( ... but I liked being able to blow up planets with the testing ship :)</p><p>Turrets are fun in that most, but not all of the turrets have their own sub-units so as to do independent elevation/orientation movement.... but a key problem is that it&#39;s currently fully independent because they don&#39;t actually talk to each other/share stats.</p>",
  "id": "60ca77803169e234986d53e7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-16T22:13:20.694Z",
  "text": "Dividing into meaningful game classes is fine, but I still think we should consider doing some futureproofing if/where it's cheap (in particular, having some use-case examples to ensure that what we're building is organizationally compatible with future goals without another complete organizational redesign would be a good thing to develop in general). I think we will therefore benefit from spending some time and effort figuring out what that set of meaningful game classes _should_ be, independent of not only what the current set of classes is but also the current set of game assets. Moreover, we need to make sure we don't induce too many feature regressions where we're currently taking advantage of non-specialization of classes (e.g. fighter bays currently work by being missile launchers armed with fighters as ammo - if we make missiles distinct, we may need to provide an alternative mechanism)\n\nAs a bit of a tangential rabbit-hole, I don't see being damaged as a differentiating feature for stations vs. ships (being able to support immortality for plot purposes seems a global need for world-building support that is not distinct to a particular sub-type of object -- even cargo containers could have macguffin status). Depending on what is meant by \"station\" then the difference would seem to be either A) is in an orbital relationship to system objects rather than independently moving or B) has a base interface when docked. The set of objects in A) have distinct relationships with both the physics modeling and the inter-system strategic modeling codes (e.g. change of unit type on system takeover by another faction) and the generated system cache/save-load (I don't think we actually record destroyed stations permanently, so they'll currently pop back into existence once a system is de-instantiated and loaded back in - which is not a desired long-term feature). B) isn't as interesting a differentiation.\n\n:-( ... but I liked being able to blow up planets with the testing ship :)\n\nTurrets are fun in that most, but not all of the turrets have their own sub-units so as to do independent elevation/orientation movement.... but a key problem is that it's currently fully independent because they don't actually talk to each other/share stats.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/Loki1950",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/21045314?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/21045314?v=4&s=60",
   "displayName": "Loki1950",
   "gv": "4",
   "id": "5e90e822d73408ce4fe00596",
   "url": "/Loki1950",
   "username": "Loki1950",
   "v": 903
  },
  "html": "Most of this seems to be explicit classes vs abstract classes.  ",
  "id": "60ca78c287848634af2478db",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-16T22:18:42.950Z",
  "text": "Most of this seems to be explicit classes vs abstract classes.  ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 25
  },
  "html": "Back to less silly thoughts - I think we need to be cognizant that many of the physical objects we intend to model in the UtCS set are large enough that treating them as a monolithic entity will eventually be challenging for multiple parts of the engine, from localizations of  both physics and graphics (floating point accuracy in modeling planetary-scale features with single models, etc.) to localizations of stats to the number of independently articulated elements for both practical and graphical purposes. It may be worth the effort to adopt an approach that is overkill for the current game asset set, but that allows the definition of assets with desirable features (and, in doing so, also is more likely to cover the needs of other asset sets as well).",
  "id": "60ca78c9bed13a2dba89e745",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-16T22:18:49.322Z",
  "text": "Back to less silly thoughts - I think we need to be cognizant that many of the physical objects we intend to model in the UtCS set are large enough that treating them as a monolithic entity will eventually be challenging for multiple parts of the engine, from localizations of  both physics and graphics (floating point accuracy in modeling planetary-scale features with single models, etc.) to localizations of stats to the number of independently articulated elements for both practical and graphical purposes. It may be worth the effort to adopt an approach that is overkill for the current game asset set, but that allows the definition of assets with desirable features (and, in doing so, also is more likely to cover the needs of other asset sets as well).",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 25
  },
  "html": "(noting that the current asset set doesn&#39;t even use the features that <em>are</em> there in the current engine very extensively :-P )",
  "id": "60ca7903747a772d99f9f853",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-16T22:19:47.729Z",
  "text": "(noting that the current asset set doesn't even use the features that _are_ there in the current engine very extensively :-P )",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/BenjamenMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=60",
   "displayName": "Benjamen Meyer",
   "gv": "4",
   "id": "5e86b71dd73408ce4fdf0da2",
   "url": "/BenjamenMeyer",
   "username": "BenjamenMeyer",
   "v": 7
  },
  "html": "Let me milk some things over and I&#39;ll try to start writing something up. I&#39;ll pass it to <span data-link-type=\"mention\" data-screen-name=\"royfalk\" class=\"mention\">@royfalk</span> for collaborationand we&#39;ll propose it here.",
  "id": "60ca89e7a5d5740d612c07b0",
  "issues": [],
  "mentions": [
   {
    "screenName": "royfalk",
    "userId": "5e90c356d73408ce4fe000f6",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-16T23:31:51.898Z",
  "text": "Let me milk some things over and I'll try to start writing something up. I'll pass it to @royfalk for collaborationand we'll propose it here.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 25
  },
  "html": "<p>some more quick thoughts while I have a few minutes: A good microcosm to explore in detail may be the difference between missiles and ships. They ARE different, and different classes would clean up the code, but we can probably learn things about what will come up during the other differentiations by going depth-first with both what the differences are and <em>should</em> be between these two classes.</p><p>For instance, many of the more obvious differences that definitely have a place in the [should be] category have to do with the detonation logic (distinct collision handling, etc) and the application of detonation-induced damage -- but even here there&#39;s some nuance to consider re: how should/could the engine model a kamikaze or fireship i.e. as a missile or as a ship with a (different?) detonation logic?<br>-- In both lore and the current engine, missiles can have shields, reactors, in-system FTL, weapon mounts and submunitions (the modeling of the latter two of these having some limitations in the current engine).<br>-- The current data set doesn&#39;t need or make use of upgrading missiles, but there&#39;s no particular lore or engine reason why we couldn&#39;t model custom thrusters (and, no, I&#39;m not advocating prioritizing a crafting system for custom red-painted faster Ork missiles :-P ) - and some other data set may conceivably want that feature.<br>-- Missiles currently have special logic to make them explode when they run out of fuel. It&#39;s not clear if this is something we specifically want/want as a configurable policy/etc. (examples of <em>is</em> vs <em>should be</em> decisions to be made)<br>-- I don&#39;t recall if the current engine allows missiles to change their target if it is destroyed, but at least some missiles should be able to do so. Conversely, missiles too dumb to actually target units (e.g. &quot;heat seeker&quot;) can only be accurately modeled if the missile <em>can</em> switch targets to other (real/chaff/ECM) targets. Similarly, the handling of ECM-Missile interactions in general is very limited compared to what we&#39;d like to be able to model -- but this is more a case of ECM/stealth/confusion/ being limited in modeling than ECM-Missile interactions specifically<br>-- UI vs. AI issues re: targeting incoming missiles - the engine can and should support targeting incoming missiles with both PD and PD that fires missiles, even if the player UI may or may not do the same, etc.<br>-- Some missiles are entirely kinetic kill vehicles via the physics model, so the collision resolution needs to account for potential contact collisions with substantial mass in a way that doesn&#39;t get overridden by the detonation resolution logic for a warhead rating of 0 damage at 0 range.<br>-- etc.</p>",
  "id": "60ca9b303169e234986d9bc2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-17T00:45:36.842Z",
  "text": "some more quick thoughts while I have a few minutes: A good microcosm to explore in detail may be the difference between missiles and ships. They ARE different, and different classes would clean up the code, but we can probably learn things about what will come up during the other differentiations by going depth-first with both what the differences are and _should_ be between these two classes.\n\nFor instance, many of the more obvious differences that definitely have a place in the [should be] category have to do with the detonation logic (distinct collision handling, etc) and the application of detonation-induced damage -- but even here there's some nuance to consider re: how should/could the engine model a kamikaze or fireship i.e. as a missile or as a ship with a (different?) detonation logic? \n-- In both lore and the current engine, missiles can have shields, reactors, in-system FTL, weapon mounts and submunitions (the modeling of the latter two of these having some limitations in the current engine). \n-- The current data set doesn't need or make use of upgrading missiles, but there's no particular lore or engine reason why we couldn't model custom thrusters (and, no, I'm not advocating prioritizing a crafting system for custom red-painted faster Ork missiles :-P ) - and some other data set may conceivably want that feature.\n-- Missiles currently have special logic to make them explode when they run out of fuel. It's not clear if this is something we specifically want/want as a configurable policy/etc. (examples of _is_ vs _should be_ decisions to be made)\n-- I don't recall if the current engine allows missiles to change their target if it is destroyed, but at least some missiles should be able to do so. Conversely, missiles too dumb to actually target units (e.g. \"heat seeker\") can only be accurately modeled if the missile _can_ switch targets to other (real/chaff/ECM) targets. Similarly, the handling of ECM-Missile interactions in general is very limited compared to what we'd like to be able to model -- but this is more a case of ECM/stealth/confusion/ being limited in modeling than ECM-Missile interactions specifically\n-- UI vs. AI issues re: targeting incoming missiles - the engine can and should support targeting incoming missiles with both PD and PD that fires missiles, even if the player UI may or may not do the same, etc.\n-- Some missiles are entirely kinetic kill vehicles via the physics model, so the collision resolution needs to account for potential contact collisions with substantial mass in a way that doesn't get overridden by the detonation resolution logic for a warhead rating of 0 damage at 0 range.\n-- etc.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/royfalk",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/10576016?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/10576016?v=4&s=60",
   "displayName": "Roy Falk",
   "gv": "4",
   "id": "5e90c356d73408ce4fe000f6",
   "url": "/royfalk",
   "username": "royfalk",
   "v": 21
  },
  "html": "OK. I just tried Jamboard and it&#39;s not up to modern standards. I suspect stuff like Google powerpoint (whatever it&#39;s called) would be much better. The UI is not mature enough.",
  "id": "60cae9adbed13a2dba8ac294",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-17T06:20:29.730Z",
  "text": "OK. I just tried Jamboard and it's not up to modern standards. I suspect stuff like Google powerpoint (whatever it's called) would be much better. The UI is not mature enough.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/royfalk",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/10576016?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/10576016?v=4&s=60",
   "displayName": "Roy Falk",
   "gv": "4",
   "id": "5e90c356d73408ce4fe000f6",
   "url": "/royfalk",
   "username": "royfalk",
   "v": 21
  },
  "html": "I did put a little bit there but it&#39;s really not enough to show where I&#39;m currently going with the code.",
  "id": "60caea184fc7ad136ad5e28d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-17T06:22:16.460Z",
  "text": "I did put a little bit there but it's really not enough to show where I'm currently going with the code.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 25
  },
  "html": "I agree re: Jamboard -- it replicates the &quot;thick marker on whiteboard&quot; feel.... but after using it I feel that&#39;s only at all useful when everyone is actively doing marker-level edits in a real-time meeting (probably on top of an imported set of images or slides, etc.). Here&#39;s a Google Slides link - I&#39;ve been fairly happy with the presentations my students have been making with Google Slides, so it should hopefully suffice <a href=\"https://docs.google.com/presentation/d/1VR3nIHJ9lHMe_CHZxtm-cu_5ZhPkeWTSs4xomSwDGZ8/edit?usp=sharing\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link \">https://docs.google.com/presentation/d/1VR3nIHJ9lHMe_CHZxtm-cu_5ZhPkeWTSs4xomSwDGZ8/edit?usp=sharing</a> This should be a better medium for more asynchronous communication that still allows shared edits.",
  "id": "60cb5f5f4fc7ad136ad6e93d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-17T14:42:39.147Z",
  "text": "I agree re: Jamboard -- it replicates the \"thick marker on whiteboard\" feel.... but after using it I feel that's only at all useful when everyone is actively doing marker-level edits in a real-time meeting (probably on top of an imported set of images or slides, etc.). Here's a Google Slides link - I've been fairly happy with the presentations my students have been making with Google Slides, so it should hopefully suffice https://docs.google.com/presentation/d/1VR3nIHJ9lHMe_CHZxtm-cu_5ZhPkeWTSs4xomSwDGZ8/edit?usp=sharing This should be a better medium for more asynchronous communication that still allows shared edits.",
  "unread": false,
  "urls": [
   {
    "url": "https://docs.google.com/presentation/d/1VR3nIHJ9lHMe_CHZxtm-cu_5ZhPkeWTSs4xomSwDGZ8/edit?usp=sharing"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 25
  },
  "html": "A quick thought on planets and damage while my little one is being well-behaved: Deimos is only ~13Km across, or ~2x the largest current models in the dataset. Whether or not we should allow blowing up Deimos, the engine should be able to model blowing up Deimos (and also making it impossible to do so A) specifically because it is marked as indestructible in a dataset or B) because a specific dataset indicated that all orbital/system/pick-your-new-nomenclature objects are indestructible for this dataset)",
  "id": "60cbeafa3169e23498709f95",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-18T00:38:18.187Z",
  "text": "A quick thought on planets and damage while my little one is being well-behaved: Deimos is only ~13Km across, or ~2x the largest current models in the dataset. Whether or not we should allow blowing up Deimos, the engine should be able to model blowing up Deimos (and also making it impossible to do so A) specifically because it is marked as indestructible in a dataset or B) because a specific dataset indicated that all orbital/system/pick-your-new-nomenclature objects are indestructible for this dataset)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 25
  },
  "html": "In the same vein, a damage inducing event against a &quot;planet&quot; event could certainly warrant distinct handling from damage against a manufactured object (environment vs. systems damage, etc?) It&#39;s not immediately obvious if an uninhabited/uninhabitable &quot;planet&quot; &quot;cares&quot;about being shot at versus the manufactured objects on said planet - but, on the other hand, our current planet&#39;s population would still get rather distraught if someone started nuking Antarctica... <em>Shrug</em> ... And now back to regulary scheduled child care",
  "id": "60cbedbd3169e2349870a53e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-18T00:50:05.614Z",
  "text": "In the same vein, a damage inducing event against a \"planet\" event could certainly warrant distinct handling from damage against a manufactured object (environment vs. systems damage, etc?) It's not immediately obvious if an uninhabited/uninhabitable \"planet\" \"cares\"about being shot at versus the manufactured objects on said planet - but, on the other hand, our current planet's population would still get rather distraught if someone started nuking Antarctica... *Shrug* ... And now back to regulary scheduled child care\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/royfalk",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/10576016?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/10576016?v=4&s=60",
   "displayName": "Roy Falk",
   "gv": "4",
   "id": "5e90c356d73408ce4fe000f6",
   "url": "/royfalk",
   "username": "royfalk",
   "v": 21
  },
  "html": "This is the beauty of this model. We can add a class of planet environment damage and make it change texture or whatever. But we should definitely deal with this later rather then earlier.<br>Inhabited areas can be designated cities as subunits but probably cities and can be damaged/destroyed.<br>I think it\u2019s better that planets have cities, ships have turrets and stations have sections than to try and use one thing for all. Just my two cents",
  "id": "60cc3875b346e9618bda1e32",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-18T06:08:53.705Z",
  "text": "This is the beauty of this model. We can add a class of planet environment damage and make it change texture or whatever. But we should definitely deal with this later rather then earlier.\nInhabited areas can be designated cities as subunits but probably cities and can be damaged/destroyed.\nI think it\u2019s better that planets have cities, ships have turrets and stations have sections than to try and use one thing for all. Just my two cents",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/BenjamenMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=60",
   "displayName": "Benjamen Meyer",
   "gv": "4",
   "id": "5e86b71dd73408ce4fdf0da2",
   "url": "/BenjamenMeyer",
   "username": "BenjamenMeyer",
   "v": 7
  },
  "html": "I would certainly say we should allow blowing up stars and planets...",
  "id": "60cca7f04fc7ad136ad9f633",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-18T14:04:32.252Z",
  "text": "I would certainly say we should allow blowing up stars and planets...",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/BenjamenMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=60",
   "displayName": "Benjamen Meyer",
   "gv": "4",
   "id": "5e86b71dd73408ce4fdf0da2",
   "url": "/BenjamenMeyer",
   "username": "BenjamenMeyer",
   "v": 7
  },
  "html": "Thinking of the WCIII story line ;)",
  "id": "60cca800d855766185e4a40d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-18T14:04:48.915Z",
  "text": "Thinking of the WCIII story line ;)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/BenjamenMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=60",
   "displayName": "Benjamen Meyer",
   "gv": "4",
   "id": "5e86b71dd73408ce4fdf0da2",
   "url": "/BenjamenMeyer",
   "username": "BenjamenMeyer",
   "v": 7
  },
  "html": "Btw, I&#39;ll be out for a coup Le",
  "id": "60cca80c5e8dfc4f118b05d0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-18T14:05:00.185Z",
  "text": "Btw, I'll be out for a coup Le\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/BenjamenMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=60",
   "displayName": "Benjamen Meyer",
   "gv": "4",
   "id": "5e86b71dd73408ce4fdf0da2",
   "url": "/BenjamenMeyer",
   "username": "BenjamenMeyer",
   "v": 7
  },
  "html": "Couple days (anniversary trip) so probably won&#39;t be responsive until Monday",
  "id": "60cca82fbed13a2dba8edd2b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-18T14:05:35.945Z",
  "text": "Couple days (anniversary trip) so probably won't be responsive until Monday",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 25
  },
  "html": "<blockquote>\n<p>This is the beauty of this model. We can add a class of planet environment damage and make it change texture or whatever. But we should definitely deal with this later rather then earlier.</p></blockquote>\n<p>I&#39;m not particularly concerned about implementing any of these features I&#39;m talking about soon (excepting cases where they would need to be re-implemented in a new paradigm to avoid feature regression, e.g. planets-go-boom, since planets can already go boom... albeit with resurrective immortality, because the current model is also flawed ) - rather I&#39;m just trying to work through a series of thought experiments to test out the abstractions themselves, i.e. &quot;Does feature X that we know we need/want map cleanly to either/both the particular abstraction/overarching paradigm(s) (e.g. polymorphic specialization vs. delegation vs. duck-typing via virtual class inheritance to implement interfaces)&quot; and, just as importantly, &quot;Can we succinctly explain the particular organization we&#39;re moving towards in the nomenclature of the related paradigm in a way that we can attempt to understand future implications/challenges and reason about whether we&#39;re happy with them.&quot; So, please interpret my brainstorms in this light, rather than as a set of what would almost certainly be ill-prioritized feature listings.</p><p>For example, if the dominant abstraction is going to be polymorphic specialization, then (the following examples given here for expository simplicity rather than a desire for either the particular abstraction or paradigm) we&#39;d want to be able to say something like &quot;A MISSILE is a SHIP that has weapon stats and detonation logic relating to those stats.&quot; This would contrast with duck-typing &quot;A MISSILE can detonate&quot; vs. delegation &quot;A MISSILE has a detonation handler&quot; vs. hybrid[polymorph+duck] &quot;A MISSILE is a SHIP that can detonate&quot; etc. Then, if we&#39;ve listed these explicit expectations/invariants about our the semantics of our class graph, we can ask ourselves questions about whether particular decisions (or the whole graph) appear to provide a good abstraction - does it cover our use cases without breaking the paradigm? does it allow management of code complexity? does it allow future modification of functionality? does it impede useful generalizations by being TOO specific, etc. See, for example my previous musing about kamikaze vs. missile -- I&#39;m not worried that it will be difficult to support both, more that, if we can&#39;t cleanly place both in the abstraction, then we need to assess whether that&#39;s a fundamental problem with our abstraction (i.e. maybe detonating isn&#39;t/shouldn&#39;t be what makes a a missile a missile, or &quot;are bombs and mines missiles because they can detonate?)&quot; or that we need to incorporate specific features orthogonal to the class hierarchy in order to enable that abstraction to model things we&#39;d like to model (e.g. if a kamikaze is just a SHIP carrying <em>live</em> missiles, despite not having actually launched them...). </p><p>Anyhow, I hope these musings are constructive -- I suspect that such thought experiments aren&#39;t going to be very targeted until we have a sketch of the intended class graph (or at least a large sub-graph) to iterate and comment on</p>",
  "id": "60ccbd5c5e8dfc4f118b38f6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-18T15:35:56.882Z",
  "text": "> This is the beauty of this model. We can add a class of planet environment damage and make it change texture or whatever. But we should definitely deal with this later rather then earlier.\n\nI'm not particularly concerned about implementing any of these features I'm talking about soon (excepting cases where they would need to be re-implemented in a new paradigm to avoid feature regression, e.g. planets-go-boom, since planets can already go boom... albeit with resurrective immortality, because the current model is also flawed ) - rather I'm just trying to work through a series of thought experiments to test out the abstractions themselves, i.e. \"Does feature X that we know we need/want map cleanly to either/both the particular abstraction/overarching paradigm(s) (e.g. polymorphic specialization vs. delegation vs. duck-typing via virtual class inheritance to implement interfaces)\" and, just as importantly, \"Can we succinctly explain the particular organization we're moving towards in the nomenclature of the related paradigm in a way that we can attempt to understand future implications/challenges and reason about whether we're happy with them.\" So, please interpret my brainstorms in this light, rather than as a set of what would almost certainly be ill-prioritized feature listings.\n\nFor example, if the dominant abstraction is going to be polymorphic specialization, then (the following examples given here for expository simplicity rather than a desire for either the particular abstraction or paradigm) we'd want to be able to say something like \"A MISSILE is a SHIP that has weapon stats and detonation logic relating to those stats.\" This would contrast with duck-typing \"A MISSILE can detonate\" vs. delegation \"A MISSILE has a detonation handler\" vs. hybrid[polymorph+duck] \"A MISSILE is a SHIP that can detonate\" etc. Then, if we've listed these explicit expectations/invariants about our the semantics of our class graph, we can ask ourselves questions about whether particular decisions (or the whole graph) appear to provide a good abstraction - does it cover our use cases without breaking the paradigm? does it allow management of code complexity? does it allow future modification of functionality? does it impede useful generalizations by being TOO specific, etc. See, for example my previous musing about kamikaze vs. missile -- I'm not worried that it will be difficult to support both, more that, if we can't cleanly place both in the abstraction, then we need to assess whether that's a fundamental problem with our abstraction (i.e. maybe detonating isn't/shouldn't be what makes a a missile a missile, or \"are bombs and mines missiles because they can detonate?)\" or that we need to incorporate specific features orthogonal to the class hierarchy in order to enable that abstraction to model things we'd like to model (e.g. if a kamikaze is just a SHIP carrying _live_ missiles, despite not having actually launched them...). \n\nAnyhow, I hope these musings are constructive -- I suspect that such thought experiments aren't going to be very targeted until we have a sketch of the intended class graph (or at least a large sub-graph) to iterate and comment on",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 25
  },
  "html": "One other set of thought experiments it may also be useful to generate as abstraction test-cases: How does a given abstraction enable/restrict/demand asset-level configurations/modeling choices (e.g. if we bind &quot;orbiting&quot; strictly to planets/stations and a dataset wants ships to enter orbits, that may not be possible to achieve purely at the scripting layer without new features, but, conversely, if the engine made orbital dynamics purely a function of gravity and initial spawn state, then you couldn&#39;t have orbiting objects move at all without gravity and couldn&#39;t easily adjust distances/periods for gameplay balance purposes, etc.)",
  "id": "60cea1374e325e613293114a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-06-20T02:00:23.051Z",
  "text": "One other set of thought experiments it may also be useful to generate as abstraction test-cases: How does a given abstraction enable/restrict/demand asset-level configurations/modeling choices (e.g. if we bind \"orbiting\" strictly to planets/stations and a dataset wants ships to enter orbits, that may not be possible to achieve purely at the scripting layer without new features, but, conversely, if the engine made orbital dynamics purely a function of gravity and initial spawn state, then you couldn't have orbiting objects move at all without gravity and couldn't easily adjust distances/periods for gameplay balance purposes, etc.)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/BenjamenMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=60",
   "displayName": "Benjamen Meyer",
   "gv": "4",
   "id": "5e86b71dd73408ce4fdf0da2",
   "url": "/BenjamenMeyer",
   "username": "BenjamenMeyer",
   "v": 13
  },
  "html": "Added some initial thoughts to the power point, and created this jamboard as well <a href=\"https://jamboard.google.com/d/1Wg1kOEnugVtGj6nfMlZIGKG-z7EoJYkEBMQPlHEOe6s/edit?usp=sharing\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link \">https://jamboard.google.com/d/1Wg1kOEnugVtGj6nfMlZIGKG-z7EoJYkEBMQPlHEOe6s/edit?usp=sharing</a>",
  "id": "60d16b91b60c3137c3861ba5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2021-06-22T04:48:17.728Z",
  "text": "Added some initial thoughts to the power point, and created this jamboard as well https://jamboard.google.com/d/1Wg1kOEnugVtGj6nfMlZIGKG-z7EoJYkEBMQPlHEOe6s/edit?usp=sharing",
  "unread": false,
  "urls": [
   {
    "url": "https://jamboard.google.com/d/1Wg1kOEnugVtGj6nfMlZIGKG-z7EoJYkEBMQPlHEOe6s/edit?usp=sharing"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/BenjamenMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=60",
   "displayName": "Benjamen Meyer",
   "gv": "4",
   "id": "5e86b71dd73408ce4fdf0da2",
   "url": "/BenjamenMeyer",
   "username": "BenjamenMeyer",
   "v": 13
  },
  "html": "I do find the jamboard a little useful - just tossing general things up that need to be put into a hierarchy of some sort",
  "id": "60d16ba9effd491d8c7a28ce",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2021-06-22T04:48:41.962Z",
  "text": "I do find the jamboard a little useful - just tossing general things up that need to be put into a hierarchy of some sort",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/BenjamenMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=60",
   "displayName": "Benjamen Meyer",
   "gv": "4",
   "id": "5e86b71dd73408ce4fdf0da2",
   "url": "/BenjamenMeyer",
   "username": "BenjamenMeyer",
   "v": 13
  },
  "html": "Think of the Jamboard as a brainstorming exercise....just toss things out and we&#39;ll group/detail later",
  "id": "60d1d7fe457e19611a11a130",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2021-06-22T12:30:54.994Z",
  "text": "Think of the Jamboard as a brainstorming exercise....just toss things out and we'll group/detail later",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/BenjamenMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=60",
   "displayName": "Benjamen Meyer",
   "gv": "4",
   "id": "5e86b71dd73408ce4fdf0da2",
   "url": "/BenjamenMeyer",
   "username": "BenjamenMeyer",
   "v": 13
  },
  "html": "Per physics/graphics, I expect a ship object will have a method to get it&#39;s graphics object,",
  "id": "60d1d8286c992105fd92d393",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2021-06-22T12:31:36.784Z",
  "text": "Per physics/graphics, I expect a ship object will have a method to get it's graphics object,",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/BenjamenMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=60",
   "displayName": "Benjamen Meyer",
   "gv": "4",
   "id": "5e86b71dd73408ce4fdf0da2",
   "url": "/BenjamenMeyer",
   "username": "BenjamenMeyer",
   "v": 13
  },
  "html": "and another to get it&#39;s physics object.",
  "id": "60d1d8419cf3171730ea9c87",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2021-06-22T12:32:01.617Z",
  "text": "and another to get it's physics object.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/BenjamenMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=60",
   "displayName": "Benjamen Meyer",
   "gv": "4",
   "id": "5e86b71dd73408ce4fdf0da2",
   "url": "/BenjamenMeyer",
   "username": "BenjamenMeyer",
   "v": 13
  },
  "html": "We don&#39;t need to have the graphics/physics models directly integrated into the various models, just means of accessing them through relationships",
  "id": "60d1d8708a40b1172820ff96",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2021-06-22T12:32:48.920Z",
  "text": "We don't need to have the graphics/physics models directly integrated into the various models, just means of accessing them through relationships\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 27
  },
  "html": "Stumbled across this in my newsfeed. Not particularly applicable to our nearer-term goals, but an interesting read from an ECS (and also Rust) advocate: <a href=\"https://kyren.github.io/2018/09/14/rustconf-talk.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link \">https://kyren.github.io/2018/09/14/rustconf-talk.html</a>",
  "id": "60d3eef7bcb3e8060edf216e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2021-06-24T02:33:27.346Z",
  "text": "Stumbled across this in my newsfeed. Not particularly applicable to our nearer-term goals, but an interesting read from an ECS (and also Rust) advocate: https://kyren.github.io/2018/09/14/rustconf-talk.html",
  "unread": false,
  "urls": [
   {
    "url": "https://kyren.github.io/2018/09/14/rustconf-talk.html"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/BenjamenMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=60",
   "displayName": "Benjamen Meyer",
   "gv": "4",
   "id": "5e86b71dd73408ce4fdf0da2",
   "url": "/BenjamenMeyer",
   "username": "BenjamenMeyer",
   "v": 13
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"ministerofinformation\" class=\"mention\">@ministerofinformation</span> interesting - I&#39;ll have to read the long form version; but glancing over the slides he basically removed C++ from it and moved to C (no classes, only structures). Sure that can work; but it can also get very messy. I kind of feel like we&#39;re in the middle of both the OO and functional patterns right now - we both don&#39;t have clear representation and we also have too much OO at the same time because the OO objects aren&#39;t well defined but more catch alls (or something like that).",
  "id": "60d3f894457e19611a167b68",
  "issues": [],
  "mentions": [
   {
    "screenName": "ministerofinformation",
    "userId": "5f19fc4ad73408ce4fea6452",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 6,
  "sent": "2021-06-24T03:14:28.378Z",
  "text": "@ministerofinformation interesting - I'll have to read the long form version; but glancing over the slides he basically removed C++ from it and moved to C (no classes, only structures). Sure that can work; but it can also get very messy. I kind of feel like we're in the middle of both the OO and functional patterns right now - we both don't have clear representation and we also have too much OO at the same time because the OO objects aren't well defined but more catch alls (or something like that).",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/BenjamenMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=60",
   "displayName": "Benjamen Meyer",
   "gv": "4",
   "id": "5e86b71dd73408ce4fdf0da2",
   "url": "/BenjamenMeyer",
   "username": "BenjamenMeyer",
   "v": 13
  },
  "html": "Certainly something to keep in mind as we go along in how to keep that balance",
  "id": "60d3f8bbbef0c66d9d1f09a4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2021-06-24T03:15:07.739Z",
  "text": "Certainly something to keep in mind as we go along in how to keep that balance",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/BenjamenMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=60",
   "displayName": "Benjamen Meyer",
   "gv": "4",
   "id": "5e86b71dd73408ce4fdf0da2",
   "url": "/BenjamenMeyer",
   "username": "BenjamenMeyer",
   "v": 13
  },
  "html": "underlying issue is - how to you model the data - whether using pure data or OO encapsulation you&#39;re still talking about modeling it all",
  "id": "60d3f8fef862a72a30cda9ec",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2021-06-24T03:16:14.339Z",
  "text": "underlying issue is - how to you model the data - whether using pure data or OO encapsulation you're still talking about modeling it all",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2021-06-25T19:03:02.953Z",
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 27
  },
  "html": "<blockquote>\n<p>underlying issue is - how to you model the data - whether using pure data or OO encapsulation you&#39;re still talking about modeling it all</p></blockquote>\n<p>Indeed. One thing I found as a useful takeaway from the article is the utility of being explicit (even if only as a thought experiment) about what the totality of the game state that you want to be able to model IS. That&#39;s the sort of thing, independent of subsequent organizing principles for the code, that will be important to document very thoroughly.</p>",
  "id": "60d6285e8c12474d8cd16d1b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2021-06-25T19:02:54.192Z",
  "text": "> underlying issue is - how to you model the data - whether using pure data or OO encapsulation you're still talking about modeling it all\n\nIndeed. One thing I found as a useful takeaway from the article is the utility of being explicit (even if only as a thought experiment) about what the totality of the game state that you want to be able to model IS. That's the sort of thing, independent of subsequent organizing principles for the code, that will be important to document very thoroughly.",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/BenjamenMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=60",
   "displayName": "Benjamen Meyer",
   "gv": "4",
   "id": "5e86b71dd73408ce4fdf0da2",
   "url": "/BenjamenMeyer",
   "username": "BenjamenMeyer",
   "v": 13
  },
  "html": ":+1:",
  "id": "60d62b0d6c992105fd9cbf08",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2021-06-25T19:14:21.400Z",
  "text": ":+1:",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/BenjamenMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=60",
   "displayName": "Benjamen Meyer",
   "gv": "4",
   "id": "5e86b71dd73408ce4fdf0da2",
   "url": "/BenjamenMeyer",
   "username": "BenjamenMeyer",
   "v": 13
  },
  "html": "yes, I very much am an &quot;explicit over implicit&quot; dev ;)",
  "id": "60d62b21effd491d8c851d53",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2021-06-25T19:14:41.643Z",
  "text": "yes, I very much am an \"explicit over implicit\" dev ;)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/stephengtuggy",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=60",
   "displayName": "Stephen G Tuggy",
   "gv": "4",
   "id": "5664891716b6c7089cbda6c8",
   "url": "/stephengtuggy",
   "username": "stephengtuggy",
   "v": 64
  },
  "html": "I will say that I like the categories <span data-link-type=\"mention\" data-screen-name=\"royfalk\" class=\"mention\">@royfalk</span> has been implementing: Energetic, Intelligent, Jump-Capable, Movable, Collideable, and so forth.",
  "id": "60eb4be923fd26511da7a241",
  "issues": [],
  "mentions": [
   {
    "screenName": "royfalk",
    "userId": "5e90c356d73408ce4fe000f6",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 6,
  "sent": "2021-07-11T19:52:09.692Z",
  "text": "I will say that I like the categories @royfalk has been implementing: Energetic, Intelligent, Jump-Capable, Movable, Collideable, and so forth.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/stephengtuggy",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=60",
   "displayName": "Stephen G Tuggy",
   "gv": "4",
   "id": "5664891716b6c7089cbda6c8",
   "url": "/stephengtuggy",
   "username": "stephengtuggy",
   "v": 64
  },
  "html": "Much like the above article mentioned, however, I think we should have the data set determine these, rather than the code.",
  "id": "60eb4c0d82dd9050f5e670e6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2021-07-11T19:52:45.434Z",
  "text": "Much like the above article mentioned, however, I think we should have the data set determine these, rather than the code.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/stephengtuggy",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=60",
   "displayName": "Stephen G Tuggy",
   "gv": "4",
   "id": "5664891716b6c7089cbda6c8",
   "url": "/stephengtuggy",
   "username": "stephengtuggy",
   "v": 64
  },
  "html": "Other categories might be Can-Dock, Can-Be-Docked-To, Should-Resolve-Forces, Should-Not-Resolve-Forces",
  "id": "60eb4c4667b72e1bfe07425a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2021-07-11T19:53:42.511Z",
  "text": "Other categories might be Can-Dock, Can-Be-Docked-To, Should-Resolve-Forces, Should-Not-Resolve-Forces",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/stephengtuggy",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=60",
   "displayName": "Stephen G Tuggy",
   "gv": "4",
   "id": "5664891716b6c7089cbda6c8",
   "url": "/stephengtuggy",
   "username": "stephengtuggy",
   "v": 64
  },
  "html": "Explosive",
  "id": "60eb4c49f2b4077d6bbf9009",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2021-07-11T19:53:45.158Z",
  "text": "Explosive",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/stephengtuggy",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=60",
   "displayName": "Stephen G Tuggy",
   "gv": "4",
   "id": "5664891716b6c7089cbda6c8",
   "url": "/stephengtuggy",
   "username": "stephengtuggy",
   "v": 64
  },
  "html": "among others.",
  "id": "60eb4c79f2b4077d6bbf903e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2021-07-11T19:54:33.886Z",
  "text": "among others.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/stephengtuggy",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=60",
   "displayName": "Stephen G Tuggy",
   "gv": "4",
   "id": "5664891716b6c7089cbda6c8",
   "url": "/stephengtuggy",
   "username": "stephengtuggy",
   "v": 64
  },
  "html": "Maybe to be clearer, Explosive should be changed to Has-Explosive-Payload.",
  "id": "60eb4ca07473bf3d781d2432",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2021-07-11T19:55:12.081Z",
  "text": "Maybe to be clearer, Explosive should be changed to Has-Explosive-Payload.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/stephengtuggy",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=60",
   "displayName": "Stephen G Tuggy",
   "gv": "4",
   "id": "5664891716b6c7089cbda6c8",
   "url": "/stephengtuggy",
   "username": "stephengtuggy",
   "v": 64
  },
  "html": "<blockquote>\n<p><span data-link-type=\"mention\" data-screen-name=\"ministerofinformation\" class=\"mention\">@ministerofinformation</span> interesting - I&#39;ll have to read the long form version; but glancing over the slides he basically removed C++ from it and moved to C (no classes, only structures). Sure that can work; but it can also get very messy. I kind of feel like we&#39;re in the middle of both the OO and functional patterns right now - we both don&#39;t have clear representation and we also have too much OO at the same time because the OO objects aren&#39;t well defined but more catch alls (or something like that).</p></blockquote>\n<p>It&#39;s worth mentioning that, IIRC, Rust doesn&#39;t have the <code>class</code> keyword. They combined <code>class</code> and <code>struct</code> into one concept, and used the latter keyword for both.</p>",
  "id": "60eb4cd87b5a415e65de02e5",
  "issues": [],
  "mentions": [
   {
    "screenName": "ministerofinformation",
    "userId": "5f19fc4ad73408ce4fea6452",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 6,
  "sent": "2021-07-11T19:56:08.094Z",
  "text": "> @ministerofinformation interesting - I'll have to read the long form version; but glancing over the slides he basically removed C++ from it and moved to C (no classes, only structures). Sure that can work; but it can also get very messy. I kind of feel like we're in the middle of both the OO and functional patterns right now - we both don't have clear representation and we also have too much OO at the same time because the OO objects aren't well defined but more catch alls (or something like that).\n\nIt's worth mentioning that, IIRC, Rust doesn't have the `class` keyword. They combined `class` and `struct` into one concept, and used the latter keyword for both.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/stephengtuggy",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=60",
   "displayName": "Stephen G Tuggy",
   "gv": "4",
   "id": "5664891716b6c7089cbda6c8",
   "url": "/stephengtuggy",
   "username": "stephengtuggy",
   "v": 64
  },
  "html": "(I&#39;m a big Rust fan, myself. I&#39;ve even thought about rewriting some or all of Vega Strike in Rust. :smile: )",
  "id": "60eb4d0238da567d82951f1c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2021-07-11T19:56:50.714Z",
  "text": "(I'm a big Rust fan, myself. I've even thought about rewriting some or all of Vega Strike in Rust. :smile: )",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/stephengtuggy",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=60",
   "displayName": "Stephen G Tuggy",
   "gv": "4",
   "id": "5664891716b6c7089cbda6c8",
   "url": "/stephengtuggy",
   "username": "stephengtuggy",
   "v": 64
  },
  "html": "Making a Rust fork of the Vega Strike Engine, and calling it Trantor. :wink: ",
  "id": "60eb4d2523fd26511da7a490",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2021-07-11T19:57:25.397Z",
  "text": "Making a Rust fork of the Vega Strike Engine, and calling it Trantor. :wink: ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 27
  },
  "html": "Rust is an interesting language - I like the design principles. Haven&#39;t had a justification to spend any time developing in it yet though, just tutorial level interactions and reading. One of the people we interviewed last year was part of an effort to build a kernel entirely in Rust (not 100% safe Rust, but minimizing non-safe Rust...). Also +1 <span data-link-type=\"mention\" data-screen-name=\"stephengtuggy\" class=\"mention\">@stephengtuggy</span>  for &quot;Trantor&quot; :)",
  "id": "60eb8f7c7473bf3d781dad2f",
  "issues": [],
  "mentions": [
   {
    "screenName": "stephengtuggy",
    "userId": "5664891716b6c7089cbda6c8",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 6,
  "sent": "2021-07-12T00:40:28.284Z",
  "text": "Rust is an interesting language - I like the design principles. Haven't had a justification to spend any time developing in it yet though, just tutorial level interactions and reading. One of the people we interviewed last year was part of an effort to build a kernel entirely in Rust (not 100% safe Rust, but minimizing non-safe Rust...). Also +1 @stephengtuggy  for \"Trantor\" :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 27
  },
  "html": "But, to reiterate my previous point from June, I think that we would benefit from first describing, explicitly, the totality of game state that <em>should</em> exist/be modeled. The right way(s) to organize that data will hopefully flow more cleanly from that, in whatever paradigm(s) best collectively cover things. ",
  "id": "60eb91fe82dd9050f5e6f478",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2021-07-12T00:51:10.312Z",
  "text": "But, to reiterate my previous point from June, I think that we would benefit from first describing, explicitly, the totality of game state that _should_ exist/be modeled. The right way(s) to organize that data will hopefully flow more cleanly from that, in whatever paradigm(s) best collectively cover things. ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 27
  },
  "html": "When one thinks about how the VS engine started off (before my time) with an aim to be an RTS (think: Wing Commander Armada + Homeworld) pivoted to covering the needs of Privateer / Elite-likes in general, and decided to keep the embers of RTS+4X alive with behind the scenes dynamic universe battles/production/conquest... It&#39;s certainly past time to actually write down some data modeling goals beyond &quot;this, plus more&quot; :-)",
  "id": "60eb9371d2556414f55c063b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2021-07-12T00:57:21.858Z",
  "text": "When one thinks about how the VS engine started off (before my time) with an aim to be an RTS (think: Wing Commander Armada + Homeworld) pivoted to covering the needs of Privateer / Elite-likes in general, and decided to keep the embers of RTS+4X alive with behind the scenes dynamic universe battles/production/conquest... It's certainly past time to actually write down some data modeling goals beyond \"this, plus more\" :-)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 27
  },
  "html": "As for class vs struct and OOPness in general, I&#39;m of the opinion that, even if not always pursued along &quot;classically OOP&quot; lines, there&#39;s always some use in having language features that help with visibility and invariant enforcement. For instance, in one of my recent papers ( <a href=\"https://dl.acm.org/doi/10.1145/3453483.3454042\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link \">https://dl.acm.org/doi/10.1145/3453483.3454042</a> ) we chose to extend an OOP (C++) baseline largely because wrapping all of our approximation logic inside a class boundary simplified the reasoning about visibility between approximate and non-approximate code -- there&#39;s nothing actually &quot;OOP&quot;y about the proposed mechanism itself...",
  "id": "60eb9810d2556414f55c0fd2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2021-07-12T01:17:04.320Z",
  "text": "As for class vs struct and OOPness in general, I'm of the opinion that, even if not always pursued along \"classically OOP\" lines, there's always some use in having language features that help with visibility and invariant enforcement. For instance, in one of my recent papers ( https://dl.acm.org/doi/10.1145/3453483.3454042 ) we chose to extend an OOP (C++) baseline largely because wrapping all of our approximation logic inside a class boundary simplified the reasoning about visibility between approximate and non-approximate code -- there's nothing actually \"OOP\"y about the proposed mechanism itself...",
  "unread": false,
  "urls": [
   {
    "url": "https://dl.acm.org/doi/10.1145/3453483.3454042"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 27
  },
  "html": "But, to bring it back to VS, to have invariants to enforce, you first have to decide what the data is/can be",
  "id": "60eb9865ec10653d5a35e353",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2021-07-12T01:18:29.041Z",
  "text": "But, to bring it back to VS, to have invariants to enforce, you first have to decide what the data is/can be\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 27
  },
  "html": ":)",
  "id": "60eb986c7b5a415e65de92dc",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2021-07-12T01:18:36.442Z",
  "text": ":)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 27
  },
  "html": "Doing a proper high level writeup on some of this is on my ToDo list... but so are a lot of other things. Will try to get something together sometime this month, because I expect to be oversubscribed come late August and the Fall semester (looks like I&#39;ll have around 360+ undergrads to deal with soon :-P)",
  "id": "60eb997b0853e41c0d51561a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2021-07-12T01:23:07.767Z",
  "text": "Doing a proper high level writeup on some of this is on my ToDo list... but so are a lot of other things. Will try to get something together sometime this month, because I expect to be oversubscribed come late August and the Fall semester (looks like I'll have around 360+ undergrads to deal with soon :-P)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 27
  },
  "html": "(now that I&#39;m off my phone and on a real machine, FWIW, the germane portion of the paper is the second bullet in section 3.3)",
  "id": "60eba5aa67b72e1bfe07f160",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2021-07-12T02:15:06.307Z",
  "text": "(now that I'm off my phone and on a real machine, FWIW, the germane portion of the paper is the second bullet in section 3.3)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/BenjamenMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=60",
   "displayName": "Benjamen Meyer",
   "gv": "4",
   "id": "5e86b71dd73408ce4fdf0da2",
   "url": "/BenjamenMeyer",
   "username": "BenjamenMeyer",
   "v": 13
  },
  "html": "Fwiw I&#39;m not opposed to integrating Rust like we do Python if it adds value and can be done easily. But first let&#39;s get ahold of what we have.",
  "id": "60ec4f6b515cab3e4fb3160c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2021-07-12T14:19:23.415Z",
  "text": "Fwiw I'm not opposed to integrating Rust like we do Python if it adds value and can be done easily. But first let's get ahold of what we have.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/BenjamenMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=60",
   "displayName": "Benjamen Meyer",
   "gv": "4",
   "id": "5e86b71dd73408ce4fdf0da2",
   "url": "/BenjamenMeyer",
   "username": "BenjamenMeyer",
   "v": 13
  },
  "html": "We do need to get to the point of understanding the game states, etc before we add more complexity.",
  "id": "60ec4fb023fd26511da9c980",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2021-07-12T14:20:32.391Z",
  "text": "We do need to get to the point of understanding the game states, etc before we add more complexity.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/BenjamenMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=60",
   "displayName": "Benjamen Meyer",
   "gv": "4",
   "id": "5e86b71dd73408ce4fdf0da2",
   "url": "/BenjamenMeyer",
   "username": "BenjamenMeyer",
   "v": 13
  },
  "html": "Building out the relationships via documentation would be a good start, and to some degree the various code audit stories will help with this conversation quite a bit.",
  "id": "60ec4fdaec10653d5a37811d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2021-07-12T14:21:14.978Z",
  "text": "Building out the relationships via documentation would be a good start, and to some degree the various code audit stories will help with this conversation quite a bit.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/stephengtuggy",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=60",
   "displayName": "Stephen G Tuggy",
   "gv": "4",
   "id": "5664891716b6c7089cbda6c8",
   "url": "/stephengtuggy",
   "username": "stephengtuggy",
   "v": 64
  },
  "html": "Hey guys. This is a little off topic, but: Does anyone know why <span data-link-type=\"mention\" data-screen-name=\"BenjamenMeyer\" class=\"mention\">@BenjamenMeyer</span> is not part of the vegastrike/code-developers team?",
  "id": "6159f5b6f2cedf67f964d8db",
  "issues": [],
  "mentions": [
   {
    "screenName": "BenjamenMeyer",
    "userId": "5e86b71dd73408ce4fdf0da2",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 6,
  "sent": "2021-10-03T18:25:58.099Z",
  "text": "Hey guys. This is a little off topic, but: Does anyone know why @BenjamenMeyer is not part of the vegastrike/code-developers team?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/stephengtuggy",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=60",
   "displayName": "Stephen G Tuggy",
   "gv": "4",
   "id": "5664891716b6c7089cbda6c8",
   "url": "/stephengtuggy",
   "username": "stephengtuggy",
   "v": 64
  },
  "html": "I&#39;m assuming it was an administrative oversight :-)",
  "id": "6159f5cc2197144e84455523",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2021-10-03T18:26:20.150Z",
  "text": "I'm assuming it was an administrative oversight :-)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/stephengtuggy",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=60",
   "displayName": "Stephen G Tuggy",
   "gv": "4",
   "id": "5664891716b6c7089cbda6c8",
   "url": "/stephengtuggy",
   "username": "stephengtuggy",
   "v": 64
  },
  "html": "Back to the question of code design: How about if we adopt a model where any in-game entity/object/unit/GameUnit can have any combination of the properties/attributes that the game engine makes available? E.g. a kamikaze starship is a ship that is also Explosive. An invisible Nav Point can be a planet that is Not Visible; Not Collidable; and does Not HaveGravity. And so forth. Each individual dataset could compose whatever sorts of objects/entities/units/GameUnits it deemed necessary.",
  "id": "6159feea8c019f0d0b14c8be",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2021-10-03T19:05:14.108Z",
  "text": "Back to the question of code design: How about if we adopt a model where any in-game entity/object/unit/GameUnit can have any combination of the properties/attributes that the game engine makes available? E.g. a kamikaze starship is a ship that is also Explosive. An invisible Nav Point can be a planet that is Not Visible; Not Collidable; and does Not HaveGravity. And so forth. Each individual dataset could compose whatever sorts of objects/entities/units/GameUnits it deemed necessary.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/stephengtuggy",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=60",
   "displayName": "Stephen G Tuggy",
   "gv": "4",
   "id": "5664891716b6c7089cbda6c8",
   "url": "/stephengtuggy",
   "username": "stephengtuggy",
   "v": 64
  },
  "html": "This would give us the most flexibility, I think, but would also likely suffer performance-wise, if we weren&#39;t careful. As <span data-link-type=\"mention\" data-screen-name=\"royfalk\" class=\"mention\">@royfalk</span> pointed out in the vegastrike/pwcu chat room.",
  "id": "6159ff139d20982e4f9cd60a",
  "issues": [],
  "mentions": [
   {
    "screenName": "royfalk",
    "userId": "5e90c356d73408ce4fe000f6",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 6,
  "sent": "2021-10-03T19:05:55.770Z",
  "text": "This would give us the most flexibility, I think, but would also likely suffer performance-wise, if we weren't careful. As @royfalk pointed out in the vegastrike/pwcu chat room.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/stephengtuggy",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=60",
   "displayName": "Stephen G Tuggy",
   "gv": "4",
   "id": "5664891716b6c7089cbda6c8",
   "url": "/stephengtuggy",
   "username": "stephengtuggy",
   "v": 64
  },
  "html": "What if we did something like taking a text string representing each attribute/property; hashing it to an integer value; and going by that integer hash during the actual gameplay?",
  "id": "6159ff578c019f0d0b14c9b3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2021-10-03T19:07:03.313Z",
  "text": "What if we did something like taking a text string representing each attribute/property; hashing it to an integer value; and going by that integer hash during the actual gameplay?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/stephengtuggy",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=60",
   "displayName": "Stephen G Tuggy",
   "gv": "4",
   "id": "5664891716b6c7089cbda6c8",
   "url": "/stephengtuggy",
   "username": "stephengtuggy",
   "v": 64
  },
  "html": "It also occurs to me that an approach like this might actually <em>speed up</em> collision calculations involving lots of missiles. Such scenarios seem to be disproportionately computationally intensive at the moment, because the engine can&#39;t use its usual &quot;3D hashtable&quot; approach to limit the search for collideable objects to a specific area of space.",
  "id": "6159ffd5fb3dcd4e88077c28",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2021-10-03T19:09:09.085Z",
  "text": "It also occurs to me that an approach like this might actually *speed up* collision calculations involving lots of missiles. Such scenarios seem to be disproportionately computationally intensive at the moment, because the engine can't use its usual \"3D hashtable\" approach to limit the search for collideable objects to a specific area of space.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/stephengtuggy",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=60",
   "displayName": "Stephen G Tuggy",
   "gv": "4",
   "id": "5664891716b6c7089cbda6c8",
   "url": "/stephengtuggy",
   "username": "stephengtuggy",
   "v": 64
  },
  "html": "With the new model, everything would be in the same &quot;3D hashtable&quot; or other in-memory representation. Everything that was capable of colliding with something else, anyway.",
  "id": "615a000d29ddcd029300e5c8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2021-10-03T19:10:05.125Z",
  "text": "With the new model, everything would be in the same \"3D hashtable\" or other in-memory representation. Everything that was capable of colliding with something else, anyway.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/stephengtuggy",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=60",
   "displayName": "Stephen G Tuggy",
   "gv": "4",
   "id": "5664891716b6c7089cbda6c8",
   "url": "/stephengtuggy",
   "username": "stephengtuggy",
   "v": 64
  },
  "html": "To determine the actual performance cost or benefit, we would probably just need to run performance tests on actual code. What do you guys think of the concept though?",
  "id": "615a003c8c019f0d0b14cb95",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2021-10-03T19:10:52.762Z",
  "text": "To determine the actual performance cost or benefit, we would probably just need to run performance tests on actual code. What do you guys think of the concept though?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/stephengtuggy",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=60",
   "displayName": "Stephen G Tuggy",
   "gv": "4",
   "id": "5664891716b6c7089cbda6c8",
   "url": "/stephengtuggy",
   "username": "stephengtuggy",
   "v": 64
  },
  "html": "I guess what I am proposing is a modified ECS model.",
  "id": "615a00ed7db1e3753e1dfe2f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2021-10-03T19:13:49.385Z",
  "text": "I guess what I am proposing is a modified ECS model.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/BenjamenMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=60",
   "displayName": "Benjamen Meyer",
   "gv": "4",
   "id": "5e86b71dd73408ce4fdf0da2",
   "url": "/BenjamenMeyer",
   "username": "BenjamenMeyer",
   "v": 13
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stephengtuggy\" class=\"mention\">@stephengtuggy</span> WRT the code developers team...not sure. just added myself in there.",
  "id": "615a6c7af2cedf67f965a569",
  "issues": [],
  "mentions": [
   {
    "screenName": "stephengtuggy",
    "userId": "5664891716b6c7089cbda6c8",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 6,
  "sent": "2021-10-04T02:52:42.188Z",
  "text": "@stephengtuggy WRT the code developers team...not sure. just added myself in there.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/royfalk",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/10576016?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/10576016?v=4&s=60",
   "displayName": "Roy Falk",
   "gv": "4",
   "id": "5e90c356d73408ce4fe000f6",
   "url": "/royfalk",
   "username": "royfalk",
   "v": 29
  },
  "html": "WRT to elaborate plans, I would caution against ambitious plans. I just had to roll back some designs in lib damage because of inflexible macros.  Now, I could rewrite these, but doing that at the end of a painful refactoring is not what I want to do.",
  "id": "615b0bca38377967f43241ba",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2021-10-04T14:12:26.267Z",
  "text": "WRT to elaborate plans, I would caution against ambitious plans. I just had to roll back some designs in lib damage because of inflexible macros.  Now, I could rewrite these, but doing that at the end of a painful refactoring is not what I want to do.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 27
  },
  "html": "<blockquote>\n<p>Back to the question of code design: How about if we adopt a model where any in-game entity/object/unit/GameUnit can have any combination of the properties/attributes that the game engine makes available? E.g. a kamikaze starship is a ship that is also Explosive. An invisible Nav Point can be a planet that is Not Visible; Not Collidable; and does Not HaveGravity. And so forth. Each individual dataset could compose whatever sorts of objects/entities/units/GameUnits it deemed necessary.</p></blockquote>\n<p>I think this a reasonable model to consider, but I think we should put in the time (/me gets nostalgic for having time) to figure out whether the property/attribute space is flat or has internal hierarchy/structure, and make sure to only expose the top/root level to datasets so as to limit code entanglement of property combinations that are fundamentally correlated/dependent/entailed (e.g. if property X being Y can only be handled when property Z is non-zero, even if property Z can be zero when property X != Y, then we should avoid exposing BOTH of property X and property Z to the dataset as if they&#39;re completely independent, or it is on us to write a property combination validator and keep it up to date with the engine. For an even more direct example, if selecting property A vs property B only changes the way that objects with property C behave, then it should be expressed from the data set only in relation to specifying property C.  )</p>",
  "id": "615b17512197144e84479f35",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2021-10-04T15:01:37.717Z",
  "text": "> Back to the question of code design: How about if we adopt a model where any in-game entity/object/unit/GameUnit can have any combination of the properties/attributes that the game engine makes available? E.g. a kamikaze starship is a ship that is also Explosive. An invisible Nav Point can be a planet that is Not Visible; Not Collidable; and does Not HaveGravity. And so forth. Each individual dataset could compose whatever sorts of objects/entities/units/GameUnits it deemed necessary.\n\nI think this a reasonable model to consider, but I think we should put in the time (/me gets nostalgic for having time) to figure out whether the property/attribute space is flat or has internal hierarchy/structure, and make sure to only expose the top/root level to datasets so as to limit code entanglement of property combinations that are fundamentally correlated/dependent/entailed (e.g. if property X being Y can only be handled when property Z is non-zero, even if property Z can be zero when property X != Y, then we should avoid exposing BOTH of property X and property Z to the dataset as if they're completely independent, or it is on us to write a property combination validator and keep it up to date with the engine. For an even more direct example, if selecting property A vs property B only changes the way that objects with property C behave, then it should be expressed from the data set only in relation to specifying property C.  )",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/royfalk",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/10576016?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/10576016?v=4&s=60",
   "displayName": "Roy Falk",
   "gv": "4",
   "id": "5e90c356d73408ce4fe000f6",
   "url": "/royfalk",
   "username": "royfalk",
   "v": 29
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"BenjamenMeyer\" class=\"mention\">@BenjamenMeyer</span> now that I&#39;m hopefully done with lib_damage, can we return to the subject of coding standards? I had some code reviewed by someone better and he noted that fields are typically named differently (_x or m_x for example) to help people reading the code differentiate between local variables and fields.<br>This made me remember we started a discussion and you&#39;ve actually worked quite a lot on it.<br>For starters, can you give us a brief overview of what you did and link to the document in question.",
  "id": "616dc6a4d3ae402e475690a2",
  "issues": [],
  "mentions": [
   {
    "screenName": "BenjamenMeyer",
    "userId": "5e86b71dd73408ce4fdf0da2",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 6,
  "sent": "2021-10-18T19:10:28.504Z",
  "text": "@BenjamenMeyer now that I'm hopefully done with lib_damage, can we return to the subject of coding standards? I had some code reviewed by someone better and he noted that fields are typically named differently (_x or m_x for example) to help people reading the code differentiate between local variables and fields.\nThis made me remember we started a discussion and you've actually worked quite a lot on it. \nFor starters, can you give us a brief overview of what you did and link to the document in question.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/stephengtuggy",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=60",
   "displayName": "Stephen G Tuggy",
   "gv": "4",
   "id": "5664891716b6c7089cbda6c8",
   "url": "/stephengtuggy",
   "username": "stephengtuggy",
   "v": 64
  },
  "html": "Yes, I too would like to return to the topic of coding standards.",
  "id": "617023ce38377967f4623e51",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2021-10-20T14:12:30.395Z",
  "text": "Yes, I too would like to return to the topic of coding standards.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2021-10-20T14:18:43.511Z",
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/BenjamenMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=60",
   "displayName": "Benjamen Meyer",
   "gv": "4",
   "id": "5e86b71dd73408ce4fdf0da2",
   "url": "/BenjamenMeyer",
   "username": "BenjamenMeyer",
   "v": 13
  },
  "html": "<p><span data-link-type=\"mention\" data-screen-name=\"royfalk\" class=\"mention\">@royfalk</span> we certainly can.<br>My raw notes on the C++ ISO Style Guide and Google Coding Style</p><ul>\n<li><a href=\"https://github.com/vegastrike/Vega-Strike-Engine-Source/issues/482#issuecomment-885997182\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link \">https://github.com/vegastrike/Vega-Strike-Engine-Source/issues/482#issuecomment-885997182</a></li>\n<li><a href=\"https://github.com/vegastrike/Vega-Strike-Engine-Source/issues/483#issuecomment-880369786\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link \">https://github.com/vegastrike/Vega-Strike-Engine-Source/issues/483#issuecomment-880369786</a></li>\n</ul>\n<p>Related issues for coding standards:</p><ul>\n<li><a target=\"_blank\" data-link-type=\"issue\" data-issue=\"223\" href=\"https://github.com/vegastrike/Vega-Strike-Engine-Source/issues/223\" data-provider=\"github\" data-issue-repo=\"vegastrike/Vega-Strike-Engine-Source\" class=\"issue\">vegastrike/Vega-Strike-Engine-Source#223</a></li>\n<li><a target=\"_blank\" data-link-type=\"issue\" data-issue=\"481\" href=\"https://github.com/vegastrike/Vega-Strike-Engine-Source/issues/481\" data-provider=\"github\" data-issue-repo=\"vegastrike/Vega-Strike-Engine-Source\" class=\"issue\">vegastrike/Vega-Strike-Engine-Source#481</a></li>\n<li><a target=\"_blank\" data-link-type=\"issue\" data-issue=\"482\" href=\"https://github.com/vegastrike/Vega-Strike-Engine-Source/issues/482\" data-provider=\"github\" data-issue-repo=\"vegastrike/Vega-Strike-Engine-Source\" class=\"issue\">vegastrike/Vega-Strike-Engine-Source#482</a></li>\n<li><a target=\"_blank\" data-link-type=\"issue\" data-issue=\"483\" href=\"https://github.com/vegastrike/Vega-Strike-Engine-Source/issues/483\" data-provider=\"github\" data-issue-repo=\"vegastrike/Vega-Strike-Engine-Source\" class=\"issue\">vegastrike/Vega-Strike-Engine-Source#483</a></li>\n</ul>\n",
  "id": "6170253cd3ae402e475c2dfd",
  "issues": [
   {
    "number": "223",
    "repo": "vegastrike/Vega-Strike-Engine-Source"
   },
   {
    "number": "481",
    "repo": "vegastrike/Vega-Strike-Engine-Source"
   },
   {
    "number": "482",
    "repo": "vegastrike/Vega-Strike-Engine-Source"
   },
   {
    "number": "483",
    "repo": "vegastrike/Vega-Strike-Engine-Source"
   }
  ],
  "mentions": [
   {
    "screenName": "royfalk",
    "userId": "5e90c356d73408ce4fe000f6",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 6,
  "sent": "2021-10-20T14:18:36.689Z",
  "text": "@royfalk we certainly can.\nMy raw notes on the C++ ISO Style Guide and Google Coding Style\n- https://github.com/vegastrike/Vega-Strike-Engine-Source/issues/482#issuecomment-885997182\n- https://github.com/vegastrike/Vega-Strike-Engine-Source/issues/483#issuecomment-880369786\n\nRelated issues for coding standards:\n- https://github.com/vegastrike/Vega-Strike-Engine-Source/issues/223\n- https://github.com/vegastrike/Vega-Strike-Engine-Source/issues/481\n- https://github.com/vegastrike/Vega-Strike-Engine-Source/issues/482\n- https://github.com/vegastrike/Vega-Strike-Engine-Source/issues/483",
  "unread": false,
  "urls": [
   {
    "url": "https://github.com/vegastrike/Vega-Strike-Engine-Source/issues/482#issuecomment-885997182"
   },
   {
    "url": "https://github.com/vegastrike/Vega-Strike-Engine-Source/issues/483#issuecomment-880369786"
   }
  ],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/BenjamenMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=60",
   "displayName": "Benjamen Meyer",
   "gv": "4",
   "id": "5e86b71dd73408ce4fdf0da2",
   "url": "/BenjamenMeyer",
   "username": "BenjamenMeyer",
   "v": 13
  },
  "html": "We also need to identify a linter.",
  "id": "6170255ffb8ca0572bd1e09d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2021-10-20T14:19:11.834Z",
  "text": "We also need to identify a linter.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/BenjamenMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=60",
   "displayName": "Benjamen Meyer",
   "gv": "4",
   "id": "5e86b71dd73408ce4fdf0da2",
   "url": "/BenjamenMeyer",
   "username": "BenjamenMeyer",
   "v": 13
  },
  "html": "My basic take:<ul>\n<li>the C++ ISO Style Guide won&#39;t be a straight forward adoption (see my notes as to why), but we can certainly adopt items from it which we should then copy out (and link back to) in our own Style Guide</li>\n<li>the Google Coding Style should be pretty easy to adopt, though we will have a couple minor deviations required for how our code operates.</li>\n</ul>\n",
  "id": "617025d9fb8ca0572bd1e16b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2021-10-20T14:21:13.862Z",
  "text": "My basic take:\n- the C++ ISO Style Guide won't be a straight forward adoption (see my notes as to why), but we can certainly adopt items from it which we should then copy out (and link back to) in our own Style Guide\n- the Google Coding Style should be pretty easy to adopt, though we will have a couple minor deviations required for how our code operates.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/stephengtuggy",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=60",
   "displayName": "Stephen G Tuggy",
   "gv": "4",
   "id": "5664891716b6c7089cbda6c8",
   "url": "/stephengtuggy",
   "username": "stephengtuggy",
   "v": 64
  },
  "html": "<blockquote>\n<p>We also need to identify a linter.</p></blockquote>\n<p>I believe the linter associated with the Google Coding Style is cpplint.</p>",
  "id": "6170295bf2cedf67f996d753",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2021-10-20T14:36:11.701Z",
  "text": "> We also need to identify a linter.\n\nI believe the linter associated with the Google Coding Style is cpplint.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/royfalk",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/10576016?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/10576016?v=4&s=60",
   "displayName": "Roy Falk",
   "gv": "4",
   "id": "5e90c356d73408ce4fe000f6",
   "url": "/royfalk",
   "username": "royfalk",
   "v": 29
  },
  "html": "<p>I picked Google specifically because of the linter. I believe the value of an automated tool that we don&#39;t have to tweak exceeds anything we roll on our own. I prefer to align with something and not change it and focus on coding the project itself.</p><p>I&#39;ll take a look today at your notes.</p>",
  "id": "617044458c019f0d0b46f990",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2021-10-20T16:31:01.670Z",
  "text": "I picked Google specifically because of the linter. I believe the value of an automated tool that we don't have to tweak exceeds anything we roll on our own. I prefer to align with something and not change it and focus on coding the project itself.\n\nI'll take a look today at your notes.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/royfalk",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/10576016?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/10576016?v=4&s=60",
   "displayName": "Roy Falk",
   "gv": "4",
   "id": "5e90c356d73408ce4fe000f6",
   "url": "/royfalk",
   "username": "royfalk",
   "v": 29
  },
  "html": "I&#39;d also like to discuss a move from float to double. I&#39;ve read about it and during a code review a few days ago, a senior embedded programmer noted that hardware today is optimized for double and not float, so use of double is recommended everywhere.<br>I know <span data-link-type=\"mention\" data-screen-name=\"ministerofinformation\" class=\"mention\">@ministerofinformation</span> talked about certain optimizations that happened a long time ago and would like to know whether this is something we want to pursue.<br>One thing to note is that you can&#39;t just search and replace. There are places where the game takes a double and splits it into two floats or something similar.",
  "id": "617047defb3dcd4e8839c7f1",
  "issues": [],
  "mentions": [
   {
    "screenName": "ministerofinformation",
    "userId": "5f19fc4ad73408ce4fea6452",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 6,
  "sent": "2021-10-20T16:46:22.591Z",
  "text": "I'd also like to discuss a move from float to double. I've read about it and during a code review a few days ago, a senior embedded programmer noted that hardware today is optimized for double and not float, so use of double is recommended everywhere. \nI know @ministerofinformation talked about certain optimizations that happened a long time ago and would like to know whether this is something we want to pursue. \nOne thing to note is that you can't just search and replace. There are places where the game takes a double and splits it into two floats or something similar.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/BenjamenMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=60",
   "displayName": "Benjamen Meyer",
   "gv": "4",
   "id": "5e86b71dd73408ce4fdf0da2",
   "url": "/BenjamenMeyer",
   "username": "BenjamenMeyer",
   "v": 13
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"royfalk\" class=\"mention\">@royfalk</span>:<ul>\n<li>regarding var/member names - I haven&#39;t really found much use for the <code>m_&lt;name&gt;</code> nomenclature;  however, I have preferred to use <code>_&lt;name&gt;</code> for function parameter. members are really automatically recognizable by the fact their associated with an object <code>this-&gt;&lt;name&gt;</code> or <code>obj.&lt;name&gt;</code>, so adding <code>m_</code> doesn&#39;t really make much difference. However, using <code>_&lt;name&gt;</code> for parameters let&#39;s one easily distinguish between normal variables and function parameters in the local scope. I&#39;ve gotten out of that habit a little since it doesn&#39;t do well in Python, but still personally prefer it for C/C++.</li>\n<li>regarding float vs double - I&#39;d like to see us move to using doubles as much as we can; however, the big thing that came up previously in that discussion was that much of the 3rd party APIs use floats in their APIs. We can downgrade for the APIs, but we&#39;d have to be careful about upgrading from float to double for loss of precision too. I&#39;m in favor, but we&#39;d need to do more investigation across the code-base and the 3rd party APIs we use. Of course, another (better) method of ensuring the precision is to not use float/double at all and do everything in scalar integers - e.g values X.YZ is represented as the integer XYZ instead; this actually has excellent performance and ensures integrity of the number where floating point (including doubles) are rather lossy. This would also require a lot of investigation but would greatly improve our accuracy.</li>\n</ul>\n",
  "id": "61704aa17db1e3753e508a29",
  "issues": [],
  "mentions": [
   {
    "screenName": "royfalk",
    "userId": "5e90c356d73408ce4fe000f6",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 6,
  "sent": "2021-10-20T16:58:09.609Z",
  "text": "@royfalk:\n- regarding var/member names - I haven't really found much use for the `m_<name>` nomenclature;  however, I have preferred to use `_<name>` for function parameter. members are really automatically recognizable by the fact their associated with an object `this-><name>` or `obj.<name>`, so adding `m_` doesn't really make much difference. However, using `_<name>` for parameters let's one easily distinguish between normal variables and function parameters in the local scope. I've gotten out of that habit a little since it doesn't do well in Python, but still personally prefer it for C/C++.\n- regarding float vs double - I'd like to see us move to using doubles as much as we can; however, the big thing that came up previously in that discussion was that much of the 3rd party APIs use floats in their APIs. We can downgrade for the APIs, but we'd have to be careful about upgrading from float to double for loss of precision too. I'm in favor, but we'd need to do more investigation across the code-base and the 3rd party APIs we use. Of course, another (better) method of ensuring the precision is to not use float/double at all and do everything in scalar integers - e.g values X.YZ is represented as the integer XYZ instead; this actually has excellent performance and ensures integrity of the number where floating point (including doubles) are rather lossy. This would also require a lot of investigation but would greatly improve our accuracy.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/royfalk",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/10576016?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/10576016?v=4&s=60",
   "displayName": "Roy Falk",
   "gv": "4",
   "id": "5e90c356d73408ce4fe000f6",
   "url": "/royfalk",
   "username": "royfalk",
   "v": 29
  },
  "html": "The naming comment was to differentiate fields from variables inside a method. I think some IDEs color these differently.",
  "id": "61704d7438377967f462accb",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2021-10-20T17:10:12.605Z",
  "text": "The naming comment was to differentiate fields from variables inside a method. I think some IDEs color these differently.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 27
  },
  "html": "<blockquote>\n<p><span data-link-type=\"mention\" data-screen-name=\"royfalk\" class=\"mention\">@royfalk</span>:</p><ul>\n<li>regarding float vs double - I&#39;d like to see us move to using doubles as much as we can; however, the big thing that came up previously in that discussion was that much of the 3rd party APIs use floats in their APIs. We can downgrade for the APIs, but we&#39;d have to be careful about upgrading from float to double for loss of precision too. I&#39;m in favor, but we&#39;d need to do more investigation across the code-base and the 3rd party APIs we use. Of course, another (better) method of ensuring the precision is to not use float/double at all and do everything in scalar integers - e.g values X.YZ is represented as the integer XYZ instead; this actually has excellent performance and ensures integrity of the number where floating point (including doubles) are rather lossy. This would also require a lot of investigation but would greatly improve our accuracy.</li>\n</ul>\n</blockquote>\n<p>Fixed point is actually a bit of a trap; Selection of the right representation that simultaneously spans not only all values, and constants (e.g. G=6.67408 \u00d7 10-11 m3 kg-1 s-2), but also all intermediate values in the relevant computations on these operands is ... challenging (and, to a large degree, what the floating point standards spent the early 1980s figuring out). Moreover, while a single integer add/multiply is faster than a single double add/double mult, N double mults will be faster than N integer multiplies (adds are likely a wash), and N vectorized adds/mults will be faster in doubles than fixed point. 53 bits of mantissa precision in doubles is plenty - I wouldn&#39;t worry about loss in any value position we care about (whereas there were real challenges in using 23 bit mantissas for 32-bit floats); fixed point ends up being lossy too, you can just (in the best case) control the absolute (rather than relative) loss.</p><p>Moving all of our internal representations from float to doubles will be fine, with the following caveats:<br>1) It will increase our memory bandwidth pressure - to the degree this is/was a bottleneck for any system, this will become moreso.<br>2) We lose out on some potential performance for vectorization width in FP32 vs FP64; we aren&#39;t currently well-optimized for vectorization now, so we won&#39;t notice until some parts of the engine get rewritten anyway.</p>",
  "id": "617056517db1e3753e50a51d",
  "issues": [],
  "mentions": [
   {
    "screenName": "royfalk",
    "userId": "5e90c356d73408ce4fe000f6",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 6,
  "sent": "2021-10-20T17:48:01.082Z",
  "text": "> @royfalk:\n> - regarding float vs double - I'd like to see us move to using doubles as much as we can; however, the big thing that came up previously in that discussion was that much of the 3rd party APIs use floats in their APIs. We can downgrade for the APIs, but we'd have to be careful about upgrading from float to double for loss of precision too. I'm in favor, but we'd need to do more investigation across the code-base and the 3rd party APIs we use. Of course, another (better) method of ensuring the precision is to not use float/double at all and do everything in scalar integers - e.g values X.YZ is represented as the integer XYZ instead; this actually has excellent performance and ensures integrity of the number where floating point (including doubles) are rather lossy. This would also require a lot of investigation but would greatly improve our accuracy.\n\nFixed point is actually a bit of a trap; Selection of the right representation that simultaneously spans not only all values, and constants (e.g. G=6.67408 \u00d7 10-11 m3 kg-1 s-2), but also all intermediate values in the relevant computations on these operands is ... challenging (and, to a large degree, what the floating point standards spent the early 1980s figuring out). Moreover, while a single integer add/multiply is faster than a single double add/double mult, N double mults will be faster than N integer multiplies (adds are likely a wash), and N vectorized adds/mults will be faster in doubles than fixed point. 53 bits of mantissa precision in doubles is plenty - I wouldn't worry about loss in any value position we care about (whereas there were real challenges in using 23 bit mantissas for 32-bit floats); fixed point ends up being lossy too, you can just (in the best case) control the absolute (rather than relative) loss.\n\nMoving all of our internal representations from float to doubles will be fine, with the following caveats: \n1) It will increase our memory bandwidth pressure - to the degree this is/was a bottleneck for any system, this will become moreso. \n2) We lose out on some potential performance for vectorization width in FP32 vs FP64; we aren't currently well-optimized for vectorization now, so we won't notice until some parts of the engine get rewritten anyway.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 27
  },
  "html": "3) As mentioned, there are some interface issues in moving between our internal representation and external libraries and data formats",
  "id": "6170566df2cedf67f9974edf",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2021-10-20T17:48:29.440Z",
  "text": "3) As mentioned, there are some interface issues in moving between our internal representation and external libraries and data formats",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 27
  },
  "html": "Specifically, a lot of graphical data and code that operates on it assumes 32-bit representations.",
  "id": "61705687cd4972068b5b2a27",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2021-10-20T17:48:55.086Z",
  "text": "Specifically, a lot of graphical data and code that operates on it assumes 32-bit representations.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 27
  },
  "html": "This is not a fundamental challenge, but we will need to make sure we identified all of the relevant crossings.",
  "id": "6170569ffb3dcd4e8839ef68",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2021-10-20T17:49:19.786Z",
  "text": "This is not a fundamental challenge, but we will need to make sure we identified all of the relevant crossings.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 27
  },
  "html": "More specifically, I think we should consider, at the least, enacting a mentality of 64-bit float is the default; if we can-and-need-to do clever performance optimizations with less precision, isolate that within the relevant library.",
  "id": "617057559d20982e4fcf8179",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2021-10-20T17:52:21.388Z",
  "text": "More specifically, I think we should consider, at the least, enacting a mentality of 64-bit float is the default; if we can-and-need-to do clever performance optimizations with less precision, isolate that within the relevant library.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 27
  },
  "html": "Or, alternatively - 64-bit floats everywhere will be correct, but possibly not efficient; separate correctness and performance concerns accordingly",
  "id": "6170577cfb3dcd4e8839f1cf",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2021-10-20T17:53:00.874Z",
  "text": "Or, alternatively - 64-bit floats everywhere will be correct, but possibly not efficient; separate correctness and performance concerns accordingly",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/BenjamenMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=60",
   "displayName": "Benjamen Meyer",
   "gv": "4",
   "id": "5e86b71dd73408ce4fdf0da2",
   "url": "/BenjamenMeyer",
   "username": "BenjamenMeyer",
   "v": 13
  },
  "html": "yeah, when you know how many decimals you need explicitly then scalar integer can be very useful; when you don&#39;t it&#39;s useless. Either way you have to ensure your values fit the data type.",
  "id": "617062dffb8ca0572bd2825e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2021-10-20T18:41:35.774Z",
  "text": "yeah, when you know how many decimals you need explicitly then scalar integer can be very useful; when you don't it's useless. Either way you have to ensure your values fit the data type.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/BenjamenMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=60",
   "displayName": "Benjamen Meyer",
   "gv": "4",
   "id": "5e86b71dd73408ce4fdf0da2",
   "url": "/BenjamenMeyer",
   "username": "BenjamenMeyer",
   "v": 13
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"ministerofinformation\" class=\"mention\">@ministerofinformation</span> is there a reason why we&#39;re using floating for energy consumption? we should be able to do that kind of thing in integer a lot better.",
  "id": "6175fc0efb3dcd4e884709be",
  "issues": [],
  "mentions": [
   {
    "screenName": "ministerofinformation",
    "userId": "5f19fc4ad73408ce4fea6452",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 6,
  "sent": "2021-10-25T00:36:30.258Z",
  "text": "@ministerofinformation is there a reason why we're using floating for energy consumption? we should be able to do that kind of thing in integer a lot better.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ministerofinformation",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/13122549?v=4&s=60",
   "displayName": "J. S.",
   "gv": "4",
   "id": "5f19fc4ad73408ce4fea6452",
   "url": "/ministerofinformation",
   "username": "ministerofinformation",
   "v": 27
  },
  "html": "So, our Fuel-&gt;energy modeling is configurable; keeping things in floats allows for that to loosely model the right orders of magnitude for fusion / thrust / etc. in the same framework as weapon, shield, etc. energy usage and energy production. Rounding at that level is effectively user invisible and doesn&#39;t require the dataset developer to pick necessarily similar unit quantities for all values (i.e. Fuel in metric tons means that the amount of fuel consumed at any given time is small, but Fuel in metric tons is in the right range for reasoning about total ship mass, volume, etc.). Floating point is a natural fit for such multiscale systems. Now... floating point for the credit count O_o ...",
  "id": "617c3a19a41fd2069911aec2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2021-10-29T18:14:49.513Z",
  "text": "So, our Fuel->energy modeling is configurable; keeping things in floats allows for that to loosely model the right orders of magnitude for fusion / thrust / etc. in the same framework as weapon, shield, etc. energy usage and energy production. Rounding at that level is effectively user invisible and doesn't require the dataset developer to pick necessarily similar unit quantities for all values (i.e. Fuel in metric tons means that the amount of fuel consumed at any given time is small, but Fuel in metric tons is in the right range for reasoning about total ship mass, volume, etc.). Floating point is a natural fit for such multiscale systems. Now... floating point for the credit count O_o ...",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/BenjamenMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=60",
   "displayName": "Benjamen Meyer",
   "gv": "4",
   "id": "5e86b71dd73408ce4fdf0da2",
   "url": "/BenjamenMeyer",
   "username": "BenjamenMeyer",
   "v": 13
  },
  "html": "Filed <a target=\"_blank\" data-link-type=\"issue\" data-issue=\"601\" href=\"https://github.com/vegastrike/Vega-Strike-Engine-Source/issues/601\" data-provider=\"github\" data-issue-repo=\"vegastrike/Vega-Strike-Engine-Source\" class=\"issue\">vegastrike/Vega-Strike-Engine-Source#601</a> for doing the data format changes - CSV to JSON/YAML.",
  "id": "617c3f4398c13e75500480f6",
  "issues": [
   {
    "number": "601",
    "repo": "vegastrike/Vega-Strike-Engine-Source"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2021-10-29T18:36:51.856Z",
  "text": "Filed https://github.com/vegastrike/Vega-Strike-Engine-Source/issues/601 for doing the data format changes - CSV to JSON/YAML.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/stephengtuggy",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=60",
   "displayName": "Stephen G Tuggy",
   "gv": "4",
   "id": "5664891716b6c7089cbda6c8",
   "url": "/stephengtuggy",
   "username": "stephengtuggy",
   "v": 64
  },
  "html": "<p><span data-link-type=\"mention\" data-screen-name=\"ministerofinformation\" class=\"mention\">@ministerofinformation</span> Yes, the credit count is in floating point. LOL</p><p>When I give myself, say, 300 billion credits, and then buy a ship, my balance drops. But if I buy an average-priced upgrade, my balance often doesn&#39;t budge at all. The purchase amount is so small by comparison, it&#39;s literally a rounding error. :-D</p>",
  "id": "618757518c019f0d0b7e6e10",
  "issues": [],
  "mentions": [
   {
    "screenName": "ministerofinformation",
    "userId": "5f19fc4ad73408ce4fea6452",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 6,
  "sent": "2021-11-07T04:34:25.312Z",
  "text": "@ministerofinformation Yes, the credit count is in floating point. LOL\n\nWhen I give myself, say, 300 billion credits, and then buy a ship, my balance drops. But if I buy an average-priced upgrade, my balance often doesn't budge at all. The purchase amount is so small by comparison, it's literally a rounding error. :-D",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/stephengtuggy",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=60",
   "displayName": "Stephen G Tuggy",
   "gv": "4",
   "id": "5664891716b6c7089cbda6c8",
   "url": "/stephengtuggy",
   "username": "stephengtuggy",
   "v": 64
  },
  "html": "<p>Hey guys. I just rediscovered some code that has concerned me in the past, as a potential memory corruption problem:</p><pre><code class=\"c++\"><span class=\"keyword\">class</span> GFXVertexList\n{\n    <span class=\"comment\">// ...</span>\n    <span class=\"keyword\">int</span>  display_list; <span class=\"comment\">//doubles as vbo_elements</span>\n    <span class=\"comment\">// ...</span>\n}</code></pre><p>in gfxlib_struct.h, and</p><pre><code class=\"c++\">        <span class=\"keyword\">if</span> (display_list) {\n            (*glDeleteBuffersARB_p)(<span class=\"number\">1</span>, (GLuint*) &amp;display_list);\n        }</code></pre><p>in gfxlib_struct.cpp.</p>",
  "id": "61bfb37daaf17f3327223327",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-12-19T22:34:37.969Z",
  "text": "Hey guys. I just rediscovered some code that has concerned me in the past, as a potential memory corruption problem:\n\n```c++\nclass GFXVertexList\n{\n    // ...\n    int  display_list; //doubles as vbo_elements\n    // ...\n}\n```\n\nin gfxlib_struct.h, and\n\n```c++\n        if (display_list) {\n            (*glDeleteBuffersARB_p)(1, (GLuint*) &display_list);\n        }\n```\n\nin gfxlib_struct.cpp.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/stephengtuggy",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=60",
   "displayName": "Stephen G Tuggy",
   "gv": "4",
   "id": "5664891716b6c7089cbda6c8",
   "url": "/stephengtuggy",
   "username": "stephengtuggy",
   "v": 64
  },
  "html": "In the first snippet, we&#39;re reusing a member variable in a way that seems very unsafe. In the second snippet, we&#39;re trying to free a &quot;buffer&quot; that is really just a 4-byte or 8-byte <code>int</code> in memory.",
  "id": "61bfb3b4743559656fc03a49",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-12-19T22:35:32.223Z",
  "text": "In the first snippet, we're reusing a member variable in a way that seems very unsafe. In the second snippet, we're trying to free a \"buffer\" that is really just a 4-byte or 8-byte `int` in memory.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/stephengtuggy",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=60",
   "displayName": "Stephen G Tuggy",
   "gv": "4",
   "id": "5664891716b6c7089cbda6c8",
   "url": "/stephengtuggy",
   "username": "stephengtuggy",
   "v": 64
  },
  "html": "Am I missing something?",
  "id": "61bfb3bf0c681346aef4b25c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-12-19T22:35:43.292Z",
  "text": "Am I missing something?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/Loki1950",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/21045314?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/21045314?v=4&s=60",
   "displayName": "Loki1950",
   "gv": "4",
   "id": "5e90e822d73408ce4fe00596",
   "url": "/Loki1950",
   "username": "Loki1950",
   "v": 1306
  },
  "html": "Might also become a leak.",
  "id": "61bfb424aaf17f3327223446",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-12-19T22:37:24.970Z",
  "text": "Might also become a leak.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/stephengtuggy",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=60",
   "displayName": "Stephen G Tuggy",
   "gv": "4",
   "id": "5664891716b6c7089cbda6c8",
   "url": "/stephengtuggy",
   "username": "stephengtuggy",
   "v": 64
  },
  "html": "Yeah.",
  "id": "61bfb4324024f534f2cae51e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-12-19T22:37:38.172Z",
  "text": "Yeah.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/stephengtuggy",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=60",
   "displayName": "Stephen G Tuggy",
   "gv": "4",
   "id": "5664891716b6c7089cbda6c8",
   "url": "/stephengtuggy",
   "username": "stephengtuggy",
   "v": 64
  },
  "html": "It could potentially cause all sorts of issues",
  "id": "61bfb4414024f534f2cae541",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-12-19T22:37:53.282Z",
  "text": "It could potentially cause all sorts of issues",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/royfalk",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/10576016?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/10576016?v=4&s=60",
   "displayName": "Roy Falk",
   "gv": "4",
   "id": "5e90c356d73408ce4fe000f6",
   "url": "/royfalk",
   "username": "royfalk",
   "v": 29
  },
  "html": "The whole gfx side of things needs love in my opinion. Preferably by someone other than me. I tried refactoring some code using animation/texture and it blew up in my face.",
  "id": "61bfb457b6d55b5adcf76ff3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-12-19T22:38:15.631Z",
  "text": "The whole gfx side of things needs love in my opinion. Preferably by someone other than me. I tried refactoring some code using animation/texture and it blew up in my face.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/royfalk",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/10576016?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/10576016?v=4&s=60",
   "displayName": "Roy Falk",
   "gv": "4",
   "id": "5e90c356d73408ce4fe000f6",
   "url": "/royfalk",
   "username": "royfalk",
   "v": 29
  },
  "html": "Also I suspect we can replace a lot of the roll our own stuff with proven libraries.",
  "id": "61bfb48bb6d55b5adcf7707d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-12-19T22:39:07.728Z",
  "text": "Also I suspect we can replace a lot of the roll our own stuff with proven libraries.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/stephengtuggy",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=60",
   "displayName": "Stephen G Tuggy",
   "gv": "4",
   "id": "5664891716b6c7089cbda6c8",
   "url": "/stephengtuggy",
   "username": "stephengtuggy",
   "v": 64
  },
  "html": ":+1: ",
  "id": "61bfb4a55a172871a914398f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-12-19T22:39:33.984Z",
  "text": ":+1: ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/stephengtuggy",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=60",
   "displayName": "Stephen G Tuggy",
   "gv": "4",
   "id": "5664891716b6c7089cbda6c8",
   "url": "/stephengtuggy",
   "username": "stephengtuggy",
   "v": 64
  },
  "html": "For now, I think I&#39;ll try adding another member variable for <code>vbo_elements</code>, alongside the existing one. Then find all references to <code>display_list</code>, and try to determine which ones should actually reference <code>vbo_elements</code> instead.",
  "id": "61bfb4deb6d55b5adcf77102",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-12-19T22:40:30.796Z",
  "text": "For now, I think I'll try adding another member variable for `vbo_elements`, alongside the existing one. Then find all references to `display_list`, and try to determine which ones should actually reference `vbo_elements` instead.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/stephengtuggy",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=60",
   "displayName": "Stephen G Tuggy",
   "gv": "4",
   "id": "5664891716b6c7089cbda6c8",
   "url": "/stephengtuggy",
   "username": "stephengtuggy",
   "v": 64
  },
  "html": "That&#39;s going to be fun",
  "id": "61bfb4e3e002586c75357413",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-12-19T22:40:35.869Z",
  "text": "That's going to be fun",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/Loki1950",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/21045314?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/21045314?v=4&s=60",
   "displayName": "Loki1950",
   "gv": "4",
   "id": "5e90e822d73408ce4fe00596",
   "url": "/Loki1950",
   "username": "Loki1950",
   "v": 1306
  },
  "html": "Might be time to bite the bullet and rewrite the whole render pipeline as <span data-link-type=\"mention\" data-screen-name=\"royfalk\" class=\"mention\">@royfalk</span> mentioned move to a modern libraries.",
  "id": "61bfb53762f3a56c818db2dd",
  "issues": [],
  "mentions": [
   {
    "screenName": "royfalk",
    "userId": "5e90c356d73408ce4fe000f6",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 5,
  "sent": "2021-12-19T22:41:59.322Z",
  "text": "Might be time to bite the bullet and rewrite the whole render pipeline as @royfalk mentioned move to a modern libraries.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/stephengtuggy",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=60",
   "displayName": "Stephen G Tuggy",
   "gv": "4",
   "id": "5664891716b6c7089cbda6c8",
   "url": "/stephengtuggy",
   "username": "stephengtuggy",
   "v": 64
  },
  "html": "Maybe.",
  "id": "61bfb573e002586c75357521",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-12-19T22:42:59.706Z",
  "text": "Maybe.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/BenjamenMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=60",
   "displayName": "Benjamen Meyer",
   "gv": "4",
   "id": "5e86b71dd73408ce4fdf0da2",
   "url": "/BenjamenMeyer",
   "username": "BenjamenMeyer",
   "v": 13
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stephengtuggy\" class=\"mention\">@stephengtuggy</span> probably needs some research into what exactly is going on, and what is using it.",
  "id": "61c0db41d40eb146b0e17939",
  "issues": [],
  "mentions": [
   {
    "screenName": "stephengtuggy",
    "userId": "5664891716b6c7089cbda6c8",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 5,
  "sent": "2021-12-20T19:36:33.791Z",
  "text": "@stephengtuggy probably needs some research into what exactly is going on, and what is using it.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/BenjamenMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=60",
   "displayName": "Benjamen Meyer",
   "gv": "4",
   "id": "5e86b71dd73408ce4fdf0da2",
   "url": "/BenjamenMeyer",
   "username": "BenjamenMeyer",
   "v": 13
  },
  "html": "I wouldn&#39;t say it&#39;s an issue outright...possible. Though I&#39;d recommend we convert those things to be pointers all the time (pointer variables, not instances that get converted to pointers).",
  "id": "61c0dbd0b6d55b5adcf9dafd",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-12-20T19:38:56.008Z",
  "text": "I wouldn't say it's an issue outright...possible. Though I'd recommend we convert those things to be pointers all the time (pointer variables, not instances that get converted to pointers).",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/stephengtuggy",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=60",
   "displayName": "Stephen G Tuggy",
   "gv": "4",
   "id": "5664891716b6c7089cbda6c8",
   "url": "/stephengtuggy",
   "username": "stephengtuggy",
   "v": 64
  },
  "html": "Hey guys. What do you think of redoing vegasettings using something like wxWidgets (<a href=\"https://www.wxwidgets.org/)?\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link \">https://www.wxwidgets.org/)?</a> Or Qt?",
  "id": "61cf7e5282a4667b25536e2a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-12-31T22:04:02.621Z",
  "text": "Hey guys. What do you think of redoing vegasettings using something like wxWidgets (https://www.wxwidgets.org/)? Or Qt?",
  "unread": false,
  "urls": [
   {
    "url": "https://www.wxwidgets.org/)?"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/stephengtuggy",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=60",
   "displayName": "Stephen G Tuggy",
   "gv": "4",
   "id": "5664891716b6c7089cbda6c8",
   "url": "/stephengtuggy",
   "username": "stephengtuggy",
   "v": 64
  },
  "html": "Since GTK -- or at least GTK3 -- doesn&#39;t seem to be an option on Windows right now.",
  "id": "61cf7e68bfe2f54b2ef72b30",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-12-31T22:04:24.581Z",
  "text": "Since GTK -- or at least GTK3 -- doesn't seem to be an option on Windows right now.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/Loki1950",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/21045314?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/21045314?v=4&s=60",
   "displayName": "Loki1950",
   "gv": "4",
   "id": "5e90e822d73408ce4fe00596",
   "url": "/Loki1950",
   "username": "Loki1950",
   "v": 1306
  },
  "html": "We should look in to it as the discussion on the issue seems to have stalled my nephew said they will more than likely tag it as a false positive and send the definition on to the virus detection software suites.  ",
  "id": "61cf84847842bd3ca923ceba",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2021-12-31T22:30:28.170Z",
  "text": "We should look in to it as the discussion on the issue seems to have stalled my nephew said they will more than likely tag it as a false positive and send the definition on to the virus detection software suites.  ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/royfalk",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/10576016?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/10576016?v=4&s=60",
   "displayName": "Roy Falk",
   "gv": "4",
   "id": "5e90c356d73408ce4fe000f6",
   "url": "/royfalk",
   "username": "royfalk",
   "v": 29
  },
  "html": "OK. Did a quick survey of options and I&#39;d say QT is the way to go.I ruled out a whole bunch of dotNET based GUI for now. If anyone wants to open this discussion, we can though. I did a quick google of &#39;* beautiful apps&#39;. wxWidgets seems 90&#39;s GUI to me. QT wasn&#39;t much better unfortunately.<br>Another option is to split GUI support and write Linux in QT, MS in dotNET and Mac in Cocoa. Honestly, at this point, none of the options appeals to me. ",
  "id": "61d1c0b582a4667b255728b9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2022-01-02T15:11:49.408Z",
  "text": "OK. Did a quick survey of options and I'd say QT is the way to go.I ruled out a whole bunch of dotNET based GUI for now. If anyone wants to open this discussion, we can though. I did a quick google of '* beautiful apps'. wxWidgets seems 90's GUI to me. QT wasn't much better unfortunately. \nAnother option is to split GUI support and write Linux in QT, MS in dotNET and Mac in Cocoa. Honestly, at this point, none of the options appeals to me. ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/royfalk",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/10576016?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/10576016?v=4&s=60",
   "displayName": "Roy Falk",
   "gv": "4",
   "id": "5e90c356d73408ce4fe000f6",
   "url": "/royfalk",
   "username": "royfalk",
   "v": 29
  },
  "html": "I think I&#39;ll start by looking to refactor the GUI code ans support for SDL2.",
  "id": "61d1c0d3e1a1264f0a37cce5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2022-01-02T15:12:19.981Z",
  "text": "I think I'll start by looking to refactor the GUI code ans support for SDL2.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/Loki1950",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/21045314?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/21045314?v=4&s=60",
   "displayName": "Loki1950",
   "gv": "4",
   "id": "5e90e822d73408ce4fe00596",
   "url": "/Loki1950",
   "username": "Loki1950",
   "v": 1306
  },
  "html": "The in game GUI is all done in Python code in the assets repo it&#39;s basically simplified html so no real hook for SDL 2.0  ",
  "id": "61d1ddc982a4667b25575ec3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2022-01-02T17:15:53.259Z",
  "text": "The in game GUI is all done in Python code in the assets repo it's basically simplified html so no real hook for SDL 2.0  ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/royfalk",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/10576016?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/10576016?v=4&s=60",
   "displayName": "Roy Falk",
   "gv": "4",
   "id": "5e90c356d73408ce4fe000f6",
   "url": "/royfalk",
   "username": "royfalk",
   "v": 29
  },
  "html": "Can you please provide a link to an example please.",
  "id": "61d1de2d5dc6213cd4c0da37",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2022-01-02T17:17:33.793Z",
  "text": "Can you please provide a link to an example please.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/royfalk",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/10576016?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/10576016?v=4&s=60",
   "displayName": "Roy Falk",
   "gv": "4",
   "id": "5e90c356d73408ce4fe000f6",
   "url": "/royfalk",
   "username": "royfalk",
   "v": 29
  },
  "html": "I was under the impression that the gui elements were our own implementation using open gl and maybe SDL. This is consistent with the code I\u2019ve seen.",
  "id": "61d1de93f5a3947800e63779",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2022-01-02T17:19:15.384Z",
  "text": "I was under the impression that the gui elements were our own implementation using open gl and maybe SDL. This is consistent with the code I\u2019ve seen.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/Loki1950",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/21045314?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/21045314?v=4&s=60",
   "displayName": "Loki1950",
   "gv": "4",
   "id": "5e90e822d73408ce4fe00596",
   "url": "/Loki1950",
   "username": "Loki1950",
   "v": 1306
  },
  "html": "The uses a Python based browser for the in game screens the open GL is only for rendering.",
  "id": "61d1df1e9b470f389748880c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2022-01-02T17:21:34.483Z",
  "text": "The uses a Python based browser for the in game screens the open GL is only for rendering.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/stephengtuggy",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=60",
   "displayName": "Stephen G Tuggy",
   "gv": "4",
   "id": "5664891716b6c7089cbda6c8",
   "url": "/stephengtuggy",
   "username": "stephengtuggy",
   "v": 64
  },
  "html": "Honestly, I think it depends on which screen we&#39;re talking about",
  "id": "61d201b25dc6213cd4c11923",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2022-01-02T19:49:06.796Z",
  "text": "Honestly, I think it depends on which screen we're talking about",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/stephengtuggy",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=60",
   "displayName": "Stephen G Tuggy",
   "gv": "4",
   "id": "5664891716b6c7089cbda6c8",
   "url": "/stephengtuggy",
   "username": "stephengtuggy",
   "v": 64
  },
  "html": "The &quot;Load Game&quot; screen from the Main Menu at startup, is handled by the assets, I believe.",
  "id": "61d201c99b470f389748c299",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2022-01-02T19:49:29.675Z",
  "text": "The \"Load Game\" screen from the Main Menu at startup, is handled by the assets, I believe.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/stephengtuggy",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=60",
   "displayName": "Stephen G Tuggy",
   "gv": "4",
   "id": "5664891716b6c7089cbda6c8",
   "url": "/stephengtuggy",
   "username": "stephengtuggy",
   "v": 64
  },
  "html": "On the other hand, the &quot;Upgrade&quot; screen that&#39;s part of the &quot;base computer&quot; seems to be handled by the engine.",
  "id": "61d201e8bfe2f54b2efb5f4d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2022-01-02T19:50:00.419Z",
  "text": "On the other hand, the \"Upgrade\" screen that's part of the \"base computer\" seems to be handled by the engine.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/stephengtuggy",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=60",
   "displayName": "Stephen G Tuggy",
   "gv": "4",
   "id": "5664891716b6c7089cbda6c8",
   "url": "/stephengtuggy",
   "username": "stephengtuggy",
   "v": 64
  },
  "html": "Between the need to completely redo the 3D graphics layer; the need to make breaking changes related to SDL; and the intractable problems the game has with things like managing memory and resources and their lifecycles; I&#39;m beginning to wonder if maybe it is time to rewrite the entire engine in a language such as Rust.",
  "id": "61d2029d5dc6213cd4c11afd",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2022-01-02T19:53:01.454Z",
  "text": "Between the need to completely redo the 3D graphics layer; the need to make breaking changes related to SDL; and the intractable problems the game has with things like managing memory and resources and their lifecycles; I'm beginning to wonder if maybe it is time to rewrite the entire engine in a language such as Rust.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/stephengtuggy",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=60",
   "displayName": "Stephen G Tuggy",
   "gv": "4",
   "id": "5664891716b6c7089cbda6c8",
   "url": "/stephengtuggy",
   "username": "stephengtuggy",
   "v": 64
  },
  "html": "We would imitate a lot of the physics code",
  "id": "61d202cc6d9ba23328a0b7b5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2022-01-02T19:53:48.465Z",
  "text": "We would imitate a lot of the physics code",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/stephengtuggy",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=60",
   "displayName": "Stephen G Tuggy",
   "gv": "4",
   "id": "5664891716b6c7089cbda6c8",
   "url": "/stephengtuggy",
   "username": "stephengtuggy",
   "v": 64
  },
  "html": "Perhaps even much of the syntax would remain the same",
  "id": "61d202d99b470f389748c3ff",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2022-01-02T19:54:01.027Z",
  "text": "Perhaps even much of the syntax would remain the same",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/stephengtuggy",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=60",
   "displayName": "Stephen G Tuggy",
   "gv": "4",
   "id": "5664891716b6c7089cbda6c8",
   "url": "/stephengtuggy",
   "username": "stephengtuggy",
   "v": 64
  },
  "html": "But we could start out on much more solid footing as far as thread- and memory-safety",
  "id": "61d202f246529077f5659a82",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2022-01-02T19:54:26.485Z",
  "text": "But we could start out on much more solid footing as far as thread- and memory-safety",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/stephengtuggy",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=60",
   "displayName": "Stephen G Tuggy",
   "gv": "4",
   "id": "5664891716b6c7089cbda6c8",
   "url": "/stephengtuggy",
   "username": "stephengtuggy",
   "v": 64
  },
  "html": "And we could use this for the 3D graphics abstraction layer: <a href=\"https://github.com/gfx-rs/wgpu\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link \">https://github.com/gfx-rs/wgpu</a>",
  "id": "61d203ce46529077f5659bdd",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2022-01-02T19:58:06.944Z",
  "text": "And we could use this for the 3D graphics abstraction layer: https://github.com/gfx-rs/wgpu",
  "unread": false,
  "urls": [
   {
    "url": "https://github.com/gfx-rs/wgpu"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/stephengtuggy",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=60",
   "displayName": "Stephen G Tuggy",
   "gv": "4",
   "id": "5664891716b6c7089cbda6c8",
   "url": "/stephengtuggy",
   "username": "stephengtuggy",
   "v": 64
  },
  "html": "which looks really cool to me",
  "id": "61d203f67842bd3ca927e71f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2022-01-02T19:58:46.683Z",
  "text": "which looks really cool to me",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/Loki1950",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/21045314?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/21045314?v=4&s=60",
   "displayName": "Loki1950",
   "gv": "4",
   "id": "5e90e822d73408ce4fe00596",
   "url": "/Loki1950",
   "username": "Loki1950",
   "v": 1306
  },
  "html": "Base computer is the interface between the C++ unit instances and the Python based unit class the input/output of which is handled Python side.",
  "id": "61d21a64e1a1264f0a387017",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2022-01-02T21:34:28.503Z",
  "text": "Base computer is the interface between the C++ unit instances and the Python based unit class the input/output of which is handled Python side.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/BenjamenMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=60",
   "displayName": "Benjamen Meyer",
   "gv": "4",
   "id": "5e86b71dd73408ce4fdf0da2",
   "url": "/BenjamenMeyer",
   "username": "BenjamenMeyer",
   "v": 13
  },
  "html": "I&#39;m all for redoing the setting stuff, and I&#39;d vote for Qt as well, and QML at that.",
  "id": "61d2521f5ee4df335ac6044e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2022-01-03T01:32:15.200Z",
  "text": "I'm all for redoing the setting stuff, and I'd vote for Qt as well, and QML at that.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/BenjamenMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=60",
   "displayName": "Benjamen Meyer",
   "gv": "4",
   "id": "5e86b71dd73408ce4fdf0da2",
   "url": "/BenjamenMeyer",
   "username": "BenjamenMeyer",
   "v": 13
  },
  "html": "As to rewriting to Rust, lets first split things up into libraries with defined interfaces. Then we can rework each library as best needed, even bringing in other languages if necessary. But it&#39;ll give us a better understanding of the code that&#39;s there.",
  "id": "61d2526d7842bd3ca9286bea",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2022-01-03T01:33:33.537Z",
  "text": "As to rewriting to Rust, lets first split things up into libraries with defined interfaces. Then we can rework each library as best needed, even bringing in other languages if necessary. But it'll give us a better understanding of the code that's there.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/BenjamenMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=60",
   "displayName": "Benjamen Meyer",
   "gv": "4",
   "id": "5e86b71dd73408ce4fdf0da2",
   "url": "/BenjamenMeyer",
   "username": "BenjamenMeyer",
   "v": 13
  },
  "html": "One of my personal tasks was for breaking down the CMake stuff into separate files for easier management, even using globbing to help minimize hard coded files.",
  "id": "61d252a5d41a5853f92f6f6a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2022-01-03T01:34:29.943Z",
  "text": "One of my personal tasks was for breaking down the CMake stuff into separate files for easier management, even using globbing to help minimize hard coded files.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/stephengtuggy",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=60",
   "displayName": "Stephen G Tuggy",
   "gv": "4",
   "id": "5664891716b6c7089cbda6c8",
   "url": "/stephengtuggy",
   "username": "stephengtuggy",
   "v": 64
  },
  "html": "Qt sounds good",
  "id": "61d7b4c35ee4df335ad0d538",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2022-01-07T03:34:27.406Z",
  "text": "Qt sounds good",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/stephengtuggy",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=60",
   "displayName": "Stephen G Tuggy",
   "gv": "4",
   "id": "5664891716b6c7089cbda6c8",
   "url": "/stephengtuggy",
   "username": "stephengtuggy",
   "v": 64
  },
  "html": "<blockquote>\n<p>As to rewriting to Rust, lets first split things up into libraries with defined interfaces. Then we can rework each library as best needed, even bringing in other languages if necessary. But it&#39;ll give us a better understanding of the code that&#39;s there.</p></blockquote>\n<p>I&#39;m just not sure how effectively the current code can be broken apart. But if we can do it, that would probably be a good way to go.</p>",
  "id": "61d7b50a7842bd3ca9335220",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2022-01-07T03:35:38.101Z",
  "text": "> As to rewriting to Rust, lets first split things up into libraries with defined interfaces. Then we can rework each library as best needed, even bringing in other languages if necessary. But it'll give us a better understanding of the code that's there.\n\nI'm just not sure how effectively the current code can be broken apart. But if we can do it, that would probably be a good way to go.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/stephengtuggy",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=60",
   "displayName": "Stephen G Tuggy",
   "gv": "4",
   "id": "5664891716b6c7089cbda6c8",
   "url": "/stephengtuggy",
   "username": "stephengtuggy",
   "v": 64
  },
  "html": "BTW, turns out that wgpu is usable from C++ as well.",
  "id": "61d7b5256d9ba23328ac029f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2022-01-07T03:36:05.334Z",
  "text": "BTW, turns out that wgpu is usable from C++ as well.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/stephengtuggy",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=60",
   "displayName": "Stephen G Tuggy",
   "gv": "4",
   "id": "5664891716b6c7089cbda6c8",
   "url": "/stephengtuggy",
   "username": "stephengtuggy",
   "v": 64
  },
  "html": "I just wrote my first wgpu program the other day",
  "id": "61d7b53d5ee4df335ad0d638",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2022-01-07T03:36:29.764Z",
  "text": "I just wrote my first wgpu program the other day",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/BenjamenMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=60",
   "displayName": "Benjamen Meyer",
   "gv": "4",
   "id": "5e86b71dd73408ce4fdf0da2",
   "url": "/BenjamenMeyer",
   "username": "BenjamenMeyer",
   "v": 13
  },
  "html": "<blockquote>\n<blockquote>\n<p>As to rewriting to Rust, lets first split things up into libraries with defined interfaces. Then we can rework each library as best needed, even bringing in other languages if necessary. But it&#39;ll give us a better understanding of the code that&#39;s there.</p></blockquote>\n<p>I&#39;m just not sure how effectively the current code can be broken apart. But if we can do it, that would probably be a good way to go.</p></blockquote>\n<p>If we can&#39;t break it apart as is, then migrating portions to Rust is going to be even harder. The breakdown in effect enforces building up internal interfaces that enable easier migrations and changing of functionality which will also help our maintenance capabilities, and then let us decide what fits which parts best - like using Rust or something else instead as applicable.</p>",
  "id": "61d84ff5bfe2f54b2e07d5d3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2022-01-07T14:36:37.537Z",
  "text": "> > As to rewriting to Rust, lets first split things up into libraries with defined interfaces. Then we can rework each library as best needed, even bringing in other languages if necessary. But it'll give us a better understanding of the code that's there.\n> \n> I'm just not sure how effectively the current code can be broken apart. But if we can do it, that would probably be a good way to go.\n\nIf we can't break it apart as is, then migrating portions to Rust is going to be even harder. The breakdown in effect enforces building up internal interfaces that enable easier migrations and changing of functionality which will also help our maintenance capabilities, and then let us decide what fits which parts best - like using Rust or something else instead as applicable.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/BenjamenMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=60",
   "displayName": "Benjamen Meyer",
   "gv": "4",
   "id": "5e86b71dd73408ce4fdf0da2",
   "url": "/BenjamenMeyer",
   "username": "BenjamenMeyer",
   "v": 13
  },
  "html": "Using Qt and even QML would give us some good experience. From what I understand of our SDL usage we might even be able to port that over to the Qt GraphScene/QML functionality which would enable more JS usage in those portions; not sure how that would interact with the Python side...just noting the possibility. Right now, moving to SDL 2 would be a good step.",
  "id": "61d8505e9a335454060ee6ec",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2022-01-07T14:38:22.422Z",
  "text": "Using Qt and even QML would give us some good experience. From what I understand of our SDL usage we might even be able to port that over to the Qt GraphScene/QML functionality which would enable more JS usage in those portions; not sure how that would interact with the Python side...just noting the possibility. Right now, moving to SDL 2 would be a good step.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/stephengtuggy",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=60",
   "displayName": "Stephen G Tuggy",
   "gv": "4",
   "id": "5664891716b6c7089cbda6c8",
   "url": "/stephengtuggy",
   "username": "stephengtuggy",
   "v": 64
  },
  "html": "OK. I guess that makes sense.",
  "id": "61da5ae482a4667b2567cde6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2022-01-09T03:47:48.374Z",
  "text": "OK. I guess that makes sense.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/stephengtuggy",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=60",
   "displayName": "Stephen G Tuggy",
   "gv": "4",
   "id": "5664891716b6c7089cbda6c8",
   "url": "/stephengtuggy",
   "username": "stephengtuggy",
   "v": 64
  },
  "html": "Right now, I am trying out reformatting the code using CLion. I am very impressed with CLion so far.",
  "id": "61da9ccf742c3d4b218ab44b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2022-01-09T08:29:03.228Z",
  "text": "Right now, I am trying out reformatting the code using CLion. I am very impressed with CLion so far.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/BenjamenMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=60",
   "displayName": "Benjamen Meyer",
   "gv": "4",
   "id": "5e86b71dd73408ce4fdf0da2",
   "url": "/BenjamenMeyer",
   "username": "BenjamenMeyer",
   "v": 13
  },
  "html": "if we did any auto-reformatting/style enforcement that way, we&#39;d need to have something command-line driven - especially for CI , but also for those of us that don&#39;t use IDEs :P",
  "id": "61dc4db582a4667b256b6b58",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2022-01-10T15:16:05.308Z",
  "text": "if we did any auto-reformatting/style enforcement that way, we'd need to have something command-line driven - especially for CI , but also for those of us that don't use IDEs :P",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2022-01-11T01:37:31.613Z",
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/stephengtuggy",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=60",
   "displayName": "Stephen G Tuggy",
   "gv": "4",
   "id": "5664891716b6c7089cbda6c8",
   "url": "/stephengtuggy",
   "username": "stephengtuggy",
   "v": 64
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"BenjamenMeyer\" class=\"mention\">@BenjamenMeyer</span> Fair. I&#39;m mostly just using CLion as a convenient, one-time way to apply our existing code standards, such as 4 spaces for indentation and braces for <code>if</code> blocks etc.",
  "id": "61dcdf4f9a33545406179cce",
  "issues": [],
  "mentions": [
   {
    "screenName": "BenjamenMeyer",
    "userId": "5e86b71dd73408ce4fdf0da2",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 5,
  "sent": "2022-01-11T01:37:19.476Z",
  "text": "@BenjamenMeyer Fair. I'm mostly just using CLion as a convenient, one-time way to apply our existing code standards, such as 4 spaces for indentation and braces for `if` blocks etc.",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/stephengtuggy",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=60",
   "displayName": "Stephen G Tuggy",
   "gv": "4",
   "id": "5664891716b6c7089cbda6c8",
   "url": "/stephengtuggy",
   "username": "stephengtuggy",
   "v": 64
  },
  "html": "That, plus it has some good refactoring suggestions. Like changing <code>NULL</code> to <code>nullptr</code> in a bunch of places.",
  "id": "61dcdf90742c3d4b218f25e3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2022-01-11T01:38:24.648Z",
  "text": "That, plus it has some good refactoring suggestions. Like changing `NULL` to `nullptr` in a bunch of places.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/stephengtuggy",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=60",
   "displayName": "Stephen G Tuggy",
   "gv": "4",
   "id": "5664891716b6c7089cbda6c8",
   "url": "/stephengtuggy",
   "username": "stephengtuggy",
   "v": 64
  },
  "html": "And suggesting the C++11 equivalent of C-style casts",
  "id": "61dcdfa32a210c38c1c0df8a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2022-01-11T01:38:43.203Z",
  "text": "And suggesting the C++11 equivalent of C-style casts",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/stephengtuggy",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=60",
   "displayName": "Stephen G Tuggy",
   "gv": "4",
   "id": "5664891716b6c7089cbda6c8",
   "url": "/stephengtuggy",
   "username": "stephengtuggy",
   "v": 64
  },
  "html": "Those last two, however, will come later. Right now I&#39;m just focusing on the spacing, braces, etc.",
  "id": "61dce18e526fb77b31726216",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2022-01-11T01:46:54.619Z",
  "text": "Those last two, however, will come later. Right now I'm just focusing on the spacing, braces, etc.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/Loki1950",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/21045314?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/21045314?v=4&s=60",
   "displayName": "Loki1950",
   "gv": "4",
   "id": "5e90e822d73408ce4fe00596",
   "url": "/Loki1950",
   "username": "Loki1950",
   "v": 1306
  },
  "html": "That&#39;s still valuable <span data-link-type=\"mention\" data-screen-name=\"stephengtuggy\" class=\"mention\">@stephengtuggy</span> ",
  "id": "61dce1c046529077f57ae679",
  "issues": [],
  "mentions": [
   {
    "screenName": "stephengtuggy",
    "userId": "5664891716b6c7089cbda6c8",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 5,
  "sent": "2022-01-11T01:47:44.084Z",
  "text": "That's still valuable @stephengtuggy ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/BenjamenMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=60",
   "displayName": "Benjamen Meyer",
   "gv": "4",
   "id": "5e86b71dd73408ce4fdf0da2",
   "url": "/BenjamenMeyer",
   "username": "BenjamenMeyer",
   "v": 13
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stephengtuggy\" class=\"mention\">@stephengtuggy</span> :+1: ",
  "id": "61dd9ab482a4667b256e64d4",
  "issues": [],
  "mentions": [
   {
    "screenName": "stephengtuggy",
    "userId": "5664891716b6c7089cbda6c8",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 5,
  "sent": "2022-01-11T14:56:52.010Z",
  "text": "@stephengtuggy :+1: ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/BenjamenMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1074110?v=4&s=60",
   "displayName": "Benjamen Meyer",
   "gv": "4",
   "id": "5e86b71dd73408ce4fdf0da2",
   "url": "/BenjamenMeyer",
   "username": "BenjamenMeyer",
   "v": 13
  },
  "html": "I&#39;d be nice to have some code style enforcement for changes; but we also need to get the code to a place where it can actually be enforced...there&#39;s probably too much variation right now to do so. #longtermgoals",
  "id": "61dd9aeb9b470f38975f887e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2022-01-11T14:57:47.111Z",
  "text": "I'd be nice to have some code style enforcement for changes; but we also need to get the code to a place where it can actually be enforced...there's probably too much variation right now to do so. #longtermgoals",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/stephengtuggy",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/13305766?v=4&s=60",
   "displayName": "Stephen G Tuggy",
   "gv": "4",
   "id": "5664891716b6c7089cbda6c8",
   "url": "/stephengtuggy",
   "username": "stephengtuggy",
   "v": 64
  },
  "html": "Yeah, maybe after I finish making this pass through the code, we can start running it through cpplint or something.",
  "id": "61de402fbfe2f54b2e139381",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2022-01-12T02:42:55.597Z",
  "text": "Yeah, maybe after I finish making this pass through the code, we can start running it through cpplint or something.",
  "unread": false,
  "urls": [],
  "v": 1
 }
]